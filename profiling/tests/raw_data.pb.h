// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raw_data.proto

#ifndef PROTOBUF_raw_5fdata_2eproto__INCLUDED
#define PROTOBUF_raw_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace test {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_raw_5fdata_2eproto();
void protobuf_AssignDesc_raw_5fdata_2eproto();
void protobuf_ShutdownFile_raw_5fdata_2eproto();

class RawData;
class RawDataArray;

// ===================================================================

class RawData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:test.RawData) */ {
 public:
  RawData();
  virtual ~RawData();

  RawData(const RawData& from);

  inline RawData& operator=(const RawData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RawData& default_instance();

  void Swap(RawData* other);

  // implements Message ----------------------------------------------

  inline RawData* New() const { return New(NULL); }

  RawData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RawData& from);
  void MergeFrom(const RawData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RawData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string myString = 1;
  void clear_mystring();
  static const int kMyStringFieldNumber = 1;
  const ::std::string& mystring() const;
  void set_mystring(const ::std::string& value);
  void set_mystring(const char* value);
  void set_mystring(const char* value, size_t size);
  ::std::string* mutable_mystring();
  ::std::string* release_mystring();
  void set_allocated_mystring(::std::string* mystring);

  // optional bytes myBytes = 2;
  void clear_mybytes();
  static const int kMyBytesFieldNumber = 2;
  const ::std::string& mybytes() const;
  void set_mybytes(const ::std::string& value);
  void set_mybytes(const char* value);
  void set_mybytes(const void* value, size_t size);
  ::std::string* mutable_mybytes();
  ::std::string* release_mybytes();
  void set_allocated_mybytes(::std::string* mybytes);

  // @@protoc_insertion_point(class_scope:test.RawData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr mystring_;
  ::google::protobuf::internal::ArenaStringPtr mybytes_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raw_5fdata_2eproto();
  friend void protobuf_AssignDesc_raw_5fdata_2eproto();
  friend void protobuf_ShutdownFile_raw_5fdata_2eproto();

  void InitAsDefaultInstance();
  static RawData* default_instance_;
};
// -------------------------------------------------------------------

class RawDataArray : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:test.RawDataArray) */ {
 public:
  RawDataArray();
  virtual ~RawDataArray();

  RawDataArray(const RawDataArray& from);

  inline RawDataArray& operator=(const RawDataArray& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RawDataArray& default_instance();

  void Swap(RawDataArray* other);

  // implements Message ----------------------------------------------

  inline RawDataArray* New() const { return New(NULL); }

  RawDataArray* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RawDataArray& from);
  void MergeFrom(const RawDataArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RawDataArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .test.RawData data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::test::RawData& data(int index) const;
  ::test::RawData* mutable_data(int index);
  ::test::RawData* add_data();
  ::google::protobuf::RepeatedPtrField< ::test::RawData >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::test::RawData >&
      data() const;

  // @@protoc_insertion_point(class_scope:test.RawDataArray)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::test::RawData > data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raw_5fdata_2eproto();
  friend void protobuf_AssignDesc_raw_5fdata_2eproto();
  friend void protobuf_ShutdownFile_raw_5fdata_2eproto();

  void InitAsDefaultInstance();
  static RawDataArray* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RawData

// optional string myString = 1;
inline void RawData::clear_mystring() {
  mystring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RawData::mystring() const {
  // @@protoc_insertion_point(field_get:test.RawData.myString)
  return mystring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawData::set_mystring(const ::std::string& value) {
  
  mystring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test.RawData.myString)
}
inline void RawData::set_mystring(const char* value) {
  
  mystring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.RawData.myString)
}
inline void RawData::set_mystring(const char* value, size_t size) {
  
  mystring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.RawData.myString)
}
inline ::std::string* RawData::mutable_mystring() {
  
  // @@protoc_insertion_point(field_mutable:test.RawData.myString)
  return mystring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawData::release_mystring() {
  // @@protoc_insertion_point(field_release:test.RawData.myString)
  
  return mystring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawData::set_allocated_mystring(::std::string* mystring) {
  if (mystring != NULL) {
    
  } else {
    
  }
  mystring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mystring);
  // @@protoc_insertion_point(field_set_allocated:test.RawData.myString)
}

// optional bytes myBytes = 2;
inline void RawData::clear_mybytes() {
  mybytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RawData::mybytes() const {
  // @@protoc_insertion_point(field_get:test.RawData.myBytes)
  return mybytes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawData::set_mybytes(const ::std::string& value) {
  
  mybytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test.RawData.myBytes)
}
inline void RawData::set_mybytes(const char* value) {
  
  mybytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.RawData.myBytes)
}
inline void RawData::set_mybytes(const void* value, size_t size) {
  
  mybytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.RawData.myBytes)
}
inline ::std::string* RawData::mutable_mybytes() {
  
  // @@protoc_insertion_point(field_mutable:test.RawData.myBytes)
  return mybytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawData::release_mybytes() {
  // @@protoc_insertion_point(field_release:test.RawData.myBytes)
  
  return mybytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawData::set_allocated_mybytes(::std::string* mybytes) {
  if (mybytes != NULL) {
    
  } else {
    
  }
  mybytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mybytes);
  // @@protoc_insertion_point(field_set_allocated:test.RawData.myBytes)
}

// -------------------------------------------------------------------

// RawDataArray

// repeated .test.RawData data = 1;
inline int RawDataArray::data_size() const {
  return data_.size();
}
inline void RawDataArray::clear_data() {
  data_.Clear();
}
inline const ::test::RawData& RawDataArray::data(int index) const {
  // @@protoc_insertion_point(field_get:test.RawDataArray.data)
  return data_.Get(index);
}
inline ::test::RawData* RawDataArray::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:test.RawDataArray.data)
  return data_.Mutable(index);
}
inline ::test::RawData* RawDataArray::add_data() {
  // @@protoc_insertion_point(field_add:test.RawDataArray.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::test::RawData >*
RawDataArray::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:test.RawDataArray.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::test::RawData >&
RawDataArray::data() const {
  // @@protoc_insertion_point(field_list:test.RawDataArray.data)
  return data_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace test

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_raw_5fdata_2eproto__INCLUDED
