# perf_events command that works:
perf record -F 99999 -e cpu-clock -g -- /usr/libc-2.20-dbg/lib/ld-2.20.so --library-path=$LD_LIBRARY_PATH ./all_types

# Download and extract glibc-<VERSION> (go to site for list of versions)
cd ~
wget open-source-box.org/libc/glibc-2.20.tar.xz
tar -xJf glibc-2.20.tar.xz

# Create a build directory to do all work from
cd glibc-2.20
mkdir build

# Create an archive of the Linux headers from target device and copy it over to the 
# cross-compile host (using scp, github, a storage device, etc.).

# On the target device:
tar -czf include.tar.gz /usr/include

# On the cross-compile host:
cd ~
tar -xzf include.tar.gz

# The above should create a new ~/usr/include directory. Let's add a /usr/glibc-2.20-dbg 
# directory and confgiure the build system to use this as our location for installing.
mkdir usr/glibc-2.20-dbg

# Download the toolchain you'll use for compiling for the target architecture
wget https://releases.linaro.org/archive/14.04/components/toolchain/binaries/gcc-linaro-arm-linux-gnueabihf-4.8-2014.04_linux.tar.bz2
tar xjf gcc-linaro-arm-linux-gnueabihf-4.8-2014.04_linux.tar.bz2
export PATH=$PATH:/home/mladmon/gcc-linaro-arm-linux-gnueabihf-4.8-2014.04_linux/bin


# Build (cross compile) for target architecture
cd ~/glibc-2.20/build
../configure --prefix=/usr/glibc-2.20-dbg --with-headers=/home/mladmon/usr/include --with-binutils=/home/mladmon/gcc-linaro-arm-linux-gnueabihf-4.8-2014.04_linux/bin --host=arm-linux-gnueabihf
make
make install

# Create an archive of the install directory and copy it over to the target device
# (using scp, github, a storage device, etc.).
tar -czf glibc-2.20-dbg.tar.gz /usr/glibc-2.20-dbg

# Installing the new library is extremely dangerous. First, let's create a byte-for-byte 
# backup image of the target device's storage disk (mine happens to be a 4GB microSD card 
# and I have a slick microSD-to-USB adapter so it's relatively easy for me). I'm using a 
# Macbook Pro so after inserting the microSD card, the following steps do the trick.
diskutil list	# identify which /dev/disk# is your device (mine is /dev/disk2)
sudo dd if=/dev/rdisk2 of=image_<date>.img bs=1m

# This takes ~282.706097 seconds on my machine. Google search "rdisk vs. disk" to see why I 
# use the rdisk variant of my mounted storage device. (Hint: it's much faster than using the 
# disk variant).

# On the target device, unpack the tarball in the root directory and modify LD_LIBRARY_PATH
cd /
tar -xzf glibc-2.20-dbg.tar.gz
LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/glibc-2.20-dbg/lib
