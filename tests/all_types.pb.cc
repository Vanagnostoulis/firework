// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: all_types.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "all_types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tutorial {

namespace {

const ::google::protobuf::Descriptor* AllTypes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllTypes_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataArray_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_all_5ftypes_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_all_5ftypes_2eproto() {
  protobuf_AddDesc_all_5ftypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "all_types.proto");
  GOOGLE_CHECK(file != NULL);
  AllTypes_descriptor_ = file->message_type(0);
  static const int AllTypes_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTypes, mydouble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTypes, myfloat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTypes, myint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTypes, myint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTypes, myuint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTypes, myuint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTypes, mysint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTypes, mysint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTypes, myfixed32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTypes, myfixed64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTypes, mysfixed32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTypes, mysfixed64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTypes, mybool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTypes, mystring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTypes, mybytes_),
  };
  AllTypes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AllTypes_descriptor_,
      AllTypes::default_instance_,
      AllTypes_offsets_,
      -1,
      -1,
      -1,
      sizeof(AllTypes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTypes, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTypes, _is_default_instance_));
  DataArray_descriptor_ = file->message_type(1);
  static const int DataArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataArray, data_),
  };
  DataArray_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DataArray_descriptor_,
      DataArray::default_instance_,
      DataArray_offsets_,
      -1,
      -1,
      -1,
      sizeof(DataArray),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataArray, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataArray, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_all_5ftypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AllTypes_descriptor_, &AllTypes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataArray_descriptor_, &DataArray::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_all_5ftypes_2eproto() {
  delete AllTypes::default_instance_;
  delete AllTypes_reflection_;
  delete DataArray::default_instance_;
  delete DataArray_reflection_;
}

void protobuf_AddDesc_all_5ftypes_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_all_5ftypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017all_types.proto\022\010tutorial\"\230\002\n\010AllTypes"
    "\022\020\n\010myDouble\030\001 \001(\001\022\017\n\007myFloat\030\002 \001(\002\022\017\n\007m"
    "yInt32\030\003 \001(\005\022\017\n\007myInt64\030\004 \001(\003\022\020\n\010myUint3"
    "2\030\005 \001(\r\022\020\n\010myUint64\030\006 \001(\004\022\020\n\010mySint32\030\007 "
    "\001(\021\022\020\n\010mySint64\030\010 \001(\022\022\021\n\tmyFixed32\030\t \001(\007"
    "\022\021\n\tmyFixed64\030\n \001(\006\022\022\n\nmySfixed32\030\013 \001(\017\022"
    "\022\n\nmySfixed64\030\014 \001(\020\022\016\n\006myBool\030\r \001(\010\022\020\n\010m"
    "yString\030\016 \001(\t\022\017\n\007myBytes\030\017 \001(\014\"-\n\tDataAr"
    "ray\022 \n\004data\030\001 \003(\0132\022.tutorial.AllTypesb\006p"
    "roto3", 365);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "all_types.proto", &protobuf_RegisterTypes);
  AllTypes::default_instance_ = new AllTypes();
  DataArray::default_instance_ = new DataArray();
  AllTypes::default_instance_->InitAsDefaultInstance();
  DataArray::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_all_5ftypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_all_5ftypes_2eproto {
  StaticDescriptorInitializer_all_5ftypes_2eproto() {
    protobuf_AddDesc_all_5ftypes_2eproto();
  }
} static_descriptor_initializer_all_5ftypes_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllTypes::kMyDoubleFieldNumber;
const int AllTypes::kMyFloatFieldNumber;
const int AllTypes::kMyInt32FieldNumber;
const int AllTypes::kMyInt64FieldNumber;
const int AllTypes::kMyUint32FieldNumber;
const int AllTypes::kMyUint64FieldNumber;
const int AllTypes::kMySint32FieldNumber;
const int AllTypes::kMySint64FieldNumber;
const int AllTypes::kMyFixed32FieldNumber;
const int AllTypes::kMyFixed64FieldNumber;
const int AllTypes::kMySfixed32FieldNumber;
const int AllTypes::kMySfixed64FieldNumber;
const int AllTypes::kMyBoolFieldNumber;
const int AllTypes::kMyStringFieldNumber;
const int AllTypes::kMyBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllTypes::AllTypes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.AllTypes)
}

void AllTypes::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AllTypes::AllTypes(const AllTypes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tutorial.AllTypes)
}

void AllTypes::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mydouble_ = 0;
  myfloat_ = 0;
  myint32_ = 0;
  myint64_ = GOOGLE_LONGLONG(0);
  myuint32_ = 0u;
  myuint64_ = GOOGLE_ULONGLONG(0);
  mysint32_ = 0;
  mysint64_ = GOOGLE_LONGLONG(0);
  myfixed32_ = 0u;
  myfixed64_ = GOOGLE_ULONGLONG(0);
  mysfixed32_ = 0;
  mysfixed64_ = GOOGLE_LONGLONG(0);
  mybool_ = false;
  mystring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mybytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AllTypes::~AllTypes() {
  // @@protoc_insertion_point(destructor:tutorial.AllTypes)
  SharedDtor();
}

void AllTypes::SharedDtor() {
  mystring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mybytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AllTypes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllTypes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllTypes_descriptor_;
}

const AllTypes& AllTypes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_all_5ftypes_2eproto();
  return *default_instance_;
}

AllTypes* AllTypes::default_instance_ = NULL;

AllTypes* AllTypes::New(::google::protobuf::Arena* arena) const {
  AllTypes* n = new AllTypes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AllTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.AllTypes)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AllTypes, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AllTypes*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mydouble_, mysint64_);
  ZR_(myfixed64_, mysfixed64_);
  mybool_ = false;
  mystring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mybytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool AllTypes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.AllTypes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double myDouble = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mydouble_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_myFloat;
        break;
      }

      // optional float myFloat = 2;
      case 2: {
        if (tag == 21) {
         parse_myFloat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &myfloat_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_myInt32;
        break;
      }

      // optional int32 myInt32 = 3;
      case 3: {
        if (tag == 24) {
         parse_myInt32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myint32_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_myInt64;
        break;
      }

      // optional int64 myInt64 = 4;
      case 4: {
        if (tag == 32) {
         parse_myInt64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &myint64_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_myUint32;
        break;
      }

      // optional uint32 myUint32 = 5;
      case 5: {
        if (tag == 40) {
         parse_myUint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myuint32_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_myUint64;
        break;
      }

      // optional uint64 myUint64 = 6;
      case 6: {
        if (tag == 48) {
         parse_myUint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &myuint64_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mySint32;
        break;
      }

      // optional sint32 mySint32 = 7;
      case 7: {
        if (tag == 56) {
         parse_mySint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &mysint32_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_mySint64;
        break;
      }

      // optional sint64 mySint64 = 8;
      case 8: {
        if (tag == 64) {
         parse_mySint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &mysint64_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_myFixed32;
        break;
      }

      // optional fixed32 myFixed32 = 9;
      case 9: {
        if (tag == 77) {
         parse_myFixed32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &myfixed32_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_myFixed64;
        break;
      }

      // optional fixed64 myFixed64 = 10;
      case 10: {
        if (tag == 81) {
         parse_myFixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &myfixed64_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_mySfixed32;
        break;
      }

      // optional sfixed32 mySfixed32 = 11;
      case 11: {
        if (tag == 93) {
         parse_mySfixed32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &mysfixed32_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_mySfixed64;
        break;
      }

      // optional sfixed64 mySfixed64 = 12;
      case 12: {
        if (tag == 97) {
         parse_mySfixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &mysfixed64_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_myBool;
        break;
      }

      // optional bool myBool = 13;
      case 13: {
        if (tag == 104) {
         parse_myBool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mybool_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_myString;
        break;
      }

      // optional string myString = 14;
      case 14: {
        if (tag == 114) {
         parse_myString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mystring()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mystring().data(), this->mystring().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tutorial.AllTypes.myString"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_myBytes;
        break;
      }

      // optional bytes myBytes = 15;
      case 15: {
        if (tag == 122) {
         parse_myBytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mybytes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.AllTypes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.AllTypes)
  return false;
#undef DO_
}

void AllTypes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.AllTypes)
  // optional double myDouble = 1;
  if (this->mydouble() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->mydouble(), output);
  }

  // optional float myFloat = 2;
  if (this->myfloat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->myfloat(), output);
  }

  // optional int32 myInt32 = 3;
  if (this->myint32() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->myint32(), output);
  }

  // optional int64 myInt64 = 4;
  if (this->myint64() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->myint64(), output);
  }

  // optional uint32 myUint32 = 5;
  if (this->myuint32() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->myuint32(), output);
  }

  // optional uint64 myUint64 = 6;
  if (this->myuint64() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->myuint64(), output);
  }

  // optional sint32 mySint32 = 7;
  if (this->mysint32() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->mysint32(), output);
  }

  // optional sint64 mySint64 = 8;
  if (this->mysint64() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(8, this->mysint64(), output);
  }

  // optional fixed32 myFixed32 = 9;
  if (this->myfixed32() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->myfixed32(), output);
  }

  // optional fixed64 myFixed64 = 10;
  if (this->myfixed64() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->myfixed64(), output);
  }

  // optional sfixed32 mySfixed32 = 11;
  if (this->mysfixed32() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(11, this->mysfixed32(), output);
  }

  // optional sfixed64 mySfixed64 = 12;
  if (this->mysfixed64() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(12, this->mysfixed64(), output);
  }

  // optional bool myBool = 13;
  if (this->mybool() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->mybool(), output);
  }

  // optional string myString = 14;
  if (this->mystring().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mystring().data(), this->mystring().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tutorial.AllTypes.myString");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->mystring(), output);
  }

  // optional bytes myBytes = 15;
  if (this->mybytes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->mybytes(), output);
  }

  // @@protoc_insertion_point(serialize_end:tutorial.AllTypes)
}

::google::protobuf::uint8* AllTypes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.AllTypes)
  // optional double myDouble = 1;
  if (this->mydouble() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->mydouble(), target);
  }

  // optional float myFloat = 2;
  if (this->myfloat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->myfloat(), target);
  }

  // optional int32 myInt32 = 3;
  if (this->myint32() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->myint32(), target);
  }

  // optional int64 myInt64 = 4;
  if (this->myint64() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->myint64(), target);
  }

  // optional uint32 myUint32 = 5;
  if (this->myuint32() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->myuint32(), target);
  }

  // optional uint64 myUint64 = 6;
  if (this->myuint64() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->myuint64(), target);
  }

  // optional sint32 mySint32 = 7;
  if (this->mysint32() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->mysint32(), target);
  }

  // optional sint64 mySint64 = 8;
  if (this->mysint64() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(8, this->mysint64(), target);
  }

  // optional fixed32 myFixed32 = 9;
  if (this->myfixed32() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->myfixed32(), target);
  }

  // optional fixed64 myFixed64 = 10;
  if (this->myfixed64() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(10, this->myfixed64(), target);
  }

  // optional sfixed32 mySfixed32 = 11;
  if (this->mysfixed32() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(11, this->mysfixed32(), target);
  }

  // optional sfixed64 mySfixed64 = 12;
  if (this->mysfixed64() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(12, this->mysfixed64(), target);
  }

  // optional bool myBool = 13;
  if (this->mybool() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->mybool(), target);
  }

  // optional string myString = 14;
  if (this->mystring().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mystring().data(), this->mystring().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tutorial.AllTypes.myString");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->mystring(), target);
  }

  // optional bytes myBytes = 15;
  if (this->mybytes().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->mybytes(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tutorial.AllTypes)
  return target;
}

int AllTypes::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.AllTypes)
  int total_size = 0;

  // optional double myDouble = 1;
  if (this->mydouble() != 0) {
    total_size += 1 + 8;
  }

  // optional float myFloat = 2;
  if (this->myfloat() != 0) {
    total_size += 1 + 4;
  }

  // optional int32 myInt32 = 3;
  if (this->myint32() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->myint32());
  }

  // optional int64 myInt64 = 4;
  if (this->myint64() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->myint64());
  }

  // optional uint32 myUint32 = 5;
  if (this->myuint32() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->myuint32());
  }

  // optional uint64 myUint64 = 6;
  if (this->myuint64() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->myuint64());
  }

  // optional sint32 mySint32 = 7;
  if (this->mysint32() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->mysint32());
  }

  // optional sint64 mySint64 = 8;
  if (this->mysint64() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->mysint64());
  }

  // optional fixed32 myFixed32 = 9;
  if (this->myfixed32() != 0) {
    total_size += 1 + 4;
  }

  // optional fixed64 myFixed64 = 10;
  if (this->myfixed64() != 0) {
    total_size += 1 + 8;
  }

  // optional sfixed32 mySfixed32 = 11;
  if (this->mysfixed32() != 0) {
    total_size += 1 + 4;
  }

  // optional sfixed64 mySfixed64 = 12;
  if (this->mysfixed64() != 0) {
    total_size += 1 + 8;
  }

  // optional bool myBool = 13;
  if (this->mybool() != 0) {
    total_size += 1 + 1;
  }

  // optional string myString = 14;
  if (this->mystring().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mystring());
  }

  // optional bytes myBytes = 15;
  if (this->mybytes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->mybytes());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllTypes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.AllTypes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AllTypes* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AllTypes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.AllTypes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.AllTypes)
    MergeFrom(*source);
  }
}

void AllTypes::MergeFrom(const AllTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.AllTypes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mydouble() != 0) {
    set_mydouble(from.mydouble());
  }
  if (from.myfloat() != 0) {
    set_myfloat(from.myfloat());
  }
  if (from.myint32() != 0) {
    set_myint32(from.myint32());
  }
  if (from.myint64() != 0) {
    set_myint64(from.myint64());
  }
  if (from.myuint32() != 0) {
    set_myuint32(from.myuint32());
  }
  if (from.myuint64() != 0) {
    set_myuint64(from.myuint64());
  }
  if (from.mysint32() != 0) {
    set_mysint32(from.mysint32());
  }
  if (from.mysint64() != 0) {
    set_mysint64(from.mysint64());
  }
  if (from.myfixed32() != 0) {
    set_myfixed32(from.myfixed32());
  }
  if (from.myfixed64() != 0) {
    set_myfixed64(from.myfixed64());
  }
  if (from.mysfixed32() != 0) {
    set_mysfixed32(from.mysfixed32());
  }
  if (from.mysfixed64() != 0) {
    set_mysfixed64(from.mysfixed64());
  }
  if (from.mybool() != 0) {
    set_mybool(from.mybool());
  }
  if (from.mystring().size() > 0) {

    mystring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mystring_);
  }
  if (from.mybytes().size() > 0) {

    mybytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mybytes_);
  }
}

void AllTypes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.AllTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllTypes::CopyFrom(const AllTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.AllTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllTypes::IsInitialized() const {

  return true;
}

void AllTypes::Swap(AllTypes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllTypes::InternalSwap(AllTypes* other) {
  std::swap(mydouble_, other->mydouble_);
  std::swap(myfloat_, other->myfloat_);
  std::swap(myint32_, other->myint32_);
  std::swap(myint64_, other->myint64_);
  std::swap(myuint32_, other->myuint32_);
  std::swap(myuint64_, other->myuint64_);
  std::swap(mysint32_, other->mysint32_);
  std::swap(mysint64_, other->mysint64_);
  std::swap(myfixed32_, other->myfixed32_);
  std::swap(myfixed64_, other->myfixed64_);
  std::swap(mysfixed32_, other->mysfixed32_);
  std::swap(mysfixed64_, other->mysfixed64_);
  std::swap(mybool_, other->mybool_);
  mystring_.Swap(&other->mystring_);
  mybytes_.Swap(&other->mybytes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AllTypes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllTypes_descriptor_;
  metadata.reflection = AllTypes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AllTypes

// optional double myDouble = 1;
void AllTypes::clear_mydouble() {
  mydouble_ = 0;
}
 double AllTypes::mydouble() const {
  // @@protoc_insertion_point(field_get:tutorial.AllTypes.myDouble)
  return mydouble_;
}
 void AllTypes::set_mydouble(double value) {
  
  mydouble_ = value;
  // @@protoc_insertion_point(field_set:tutorial.AllTypes.myDouble)
}

// optional float myFloat = 2;
void AllTypes::clear_myfloat() {
  myfloat_ = 0;
}
 float AllTypes::myfloat() const {
  // @@protoc_insertion_point(field_get:tutorial.AllTypes.myFloat)
  return myfloat_;
}
 void AllTypes::set_myfloat(float value) {
  
  myfloat_ = value;
  // @@protoc_insertion_point(field_set:tutorial.AllTypes.myFloat)
}

// optional int32 myInt32 = 3;
void AllTypes::clear_myint32() {
  myint32_ = 0;
}
 ::google::protobuf::int32 AllTypes::myint32() const {
  // @@protoc_insertion_point(field_get:tutorial.AllTypes.myInt32)
  return myint32_;
}
 void AllTypes::set_myint32(::google::protobuf::int32 value) {
  
  myint32_ = value;
  // @@protoc_insertion_point(field_set:tutorial.AllTypes.myInt32)
}

// optional int64 myInt64 = 4;
void AllTypes::clear_myint64() {
  myint64_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 AllTypes::myint64() const {
  // @@protoc_insertion_point(field_get:tutorial.AllTypes.myInt64)
  return myint64_;
}
 void AllTypes::set_myint64(::google::protobuf::int64 value) {
  
  myint64_ = value;
  // @@protoc_insertion_point(field_set:tutorial.AllTypes.myInt64)
}

// optional uint32 myUint32 = 5;
void AllTypes::clear_myuint32() {
  myuint32_ = 0u;
}
 ::google::protobuf::uint32 AllTypes::myuint32() const {
  // @@protoc_insertion_point(field_get:tutorial.AllTypes.myUint32)
  return myuint32_;
}
 void AllTypes::set_myuint32(::google::protobuf::uint32 value) {
  
  myuint32_ = value;
  // @@protoc_insertion_point(field_set:tutorial.AllTypes.myUint32)
}

// optional uint64 myUint64 = 6;
void AllTypes::clear_myuint64() {
  myuint64_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AllTypes::myuint64() const {
  // @@protoc_insertion_point(field_get:tutorial.AllTypes.myUint64)
  return myuint64_;
}
 void AllTypes::set_myuint64(::google::protobuf::uint64 value) {
  
  myuint64_ = value;
  // @@protoc_insertion_point(field_set:tutorial.AllTypes.myUint64)
}

// optional sint32 mySint32 = 7;
void AllTypes::clear_mysint32() {
  mysint32_ = 0;
}
 ::google::protobuf::int32 AllTypes::mysint32() const {
  // @@protoc_insertion_point(field_get:tutorial.AllTypes.mySint32)
  return mysint32_;
}
 void AllTypes::set_mysint32(::google::protobuf::int32 value) {
  
  mysint32_ = value;
  // @@protoc_insertion_point(field_set:tutorial.AllTypes.mySint32)
}

// optional sint64 mySint64 = 8;
void AllTypes::clear_mysint64() {
  mysint64_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 AllTypes::mysint64() const {
  // @@protoc_insertion_point(field_get:tutorial.AllTypes.mySint64)
  return mysint64_;
}
 void AllTypes::set_mysint64(::google::protobuf::int64 value) {
  
  mysint64_ = value;
  // @@protoc_insertion_point(field_set:tutorial.AllTypes.mySint64)
}

// optional fixed32 myFixed32 = 9;
void AllTypes::clear_myfixed32() {
  myfixed32_ = 0u;
}
 ::google::protobuf::uint32 AllTypes::myfixed32() const {
  // @@protoc_insertion_point(field_get:tutorial.AllTypes.myFixed32)
  return myfixed32_;
}
 void AllTypes::set_myfixed32(::google::protobuf::uint32 value) {
  
  myfixed32_ = value;
  // @@protoc_insertion_point(field_set:tutorial.AllTypes.myFixed32)
}

// optional fixed64 myFixed64 = 10;
void AllTypes::clear_myfixed64() {
  myfixed64_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AllTypes::myfixed64() const {
  // @@protoc_insertion_point(field_get:tutorial.AllTypes.myFixed64)
  return myfixed64_;
}
 void AllTypes::set_myfixed64(::google::protobuf::uint64 value) {
  
  myfixed64_ = value;
  // @@protoc_insertion_point(field_set:tutorial.AllTypes.myFixed64)
}

// optional sfixed32 mySfixed32 = 11;
void AllTypes::clear_mysfixed32() {
  mysfixed32_ = 0;
}
 ::google::protobuf::int32 AllTypes::mysfixed32() const {
  // @@protoc_insertion_point(field_get:tutorial.AllTypes.mySfixed32)
  return mysfixed32_;
}
 void AllTypes::set_mysfixed32(::google::protobuf::int32 value) {
  
  mysfixed32_ = value;
  // @@protoc_insertion_point(field_set:tutorial.AllTypes.mySfixed32)
}

// optional sfixed64 mySfixed64 = 12;
void AllTypes::clear_mysfixed64() {
  mysfixed64_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 AllTypes::mysfixed64() const {
  // @@protoc_insertion_point(field_get:tutorial.AllTypes.mySfixed64)
  return mysfixed64_;
}
 void AllTypes::set_mysfixed64(::google::protobuf::int64 value) {
  
  mysfixed64_ = value;
  // @@protoc_insertion_point(field_set:tutorial.AllTypes.mySfixed64)
}

// optional bool myBool = 13;
void AllTypes::clear_mybool() {
  mybool_ = false;
}
 bool AllTypes::mybool() const {
  // @@protoc_insertion_point(field_get:tutorial.AllTypes.myBool)
  return mybool_;
}
 void AllTypes::set_mybool(bool value) {
  
  mybool_ = value;
  // @@protoc_insertion_point(field_set:tutorial.AllTypes.myBool)
}

// optional string myString = 14;
void AllTypes::clear_mystring() {
  mystring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AllTypes::mystring() const {
  // @@protoc_insertion_point(field_get:tutorial.AllTypes.myString)
  return mystring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AllTypes::set_mystring(const ::std::string& value) {
  
  mystring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.AllTypes.myString)
}
 void AllTypes::set_mystring(const char* value) {
  
  mystring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.AllTypes.myString)
}
 void AllTypes::set_mystring(const char* value, size_t size) {
  
  mystring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.AllTypes.myString)
}
 ::std::string* AllTypes::mutable_mystring() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.AllTypes.myString)
  return mystring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AllTypes::release_mystring() {
  // @@protoc_insertion_point(field_release:tutorial.AllTypes.myString)
  
  return mystring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AllTypes::set_allocated_mystring(::std::string* mystring) {
  if (mystring != NULL) {
    
  } else {
    
  }
  mystring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mystring);
  // @@protoc_insertion_point(field_set_allocated:tutorial.AllTypes.myString)
}

// optional bytes myBytes = 15;
void AllTypes::clear_mybytes() {
  mybytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AllTypes::mybytes() const {
  // @@protoc_insertion_point(field_get:tutorial.AllTypes.myBytes)
  return mybytes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AllTypes::set_mybytes(const ::std::string& value) {
  
  mybytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.AllTypes.myBytes)
}
 void AllTypes::set_mybytes(const char* value) {
  
  mybytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.AllTypes.myBytes)
}
 void AllTypes::set_mybytes(const void* value, size_t size) {
  
  mybytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.AllTypes.myBytes)
}
 ::std::string* AllTypes::mutable_mybytes() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.AllTypes.myBytes)
  return mybytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AllTypes::release_mybytes() {
  // @@protoc_insertion_point(field_release:tutorial.AllTypes.myBytes)
  
  return mybytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AllTypes::set_allocated_mybytes(::std::string* mybytes) {
  if (mybytes != NULL) {
    
  } else {
    
  }
  mybytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mybytes);
  // @@protoc_insertion_point(field_set_allocated:tutorial.AllTypes.myBytes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataArray::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataArray::DataArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.DataArray)
}

void DataArray::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DataArray::DataArray(const DataArray& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tutorial.DataArray)
}

void DataArray::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

DataArray::~DataArray() {
  // @@protoc_insertion_point(destructor:tutorial.DataArray)
  SharedDtor();
}

void DataArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataArray_descriptor_;
}

const DataArray& DataArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_all_5ftypes_2eproto();
  return *default_instance_;
}

DataArray* DataArray::default_instance_ = NULL;

DataArray* DataArray::New(::google::protobuf::Arena* arena) const {
  DataArray* n = new DataArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataArray::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.DataArray)
  data_.Clear();
}

bool DataArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.DataArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tutorial.AllTypes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.DataArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.DataArray)
  return false;
#undef DO_
}

void DataArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.DataArray)
  // repeated .tutorial.AllTypes data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tutorial.DataArray)
}

::google::protobuf::uint8* DataArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.DataArray)
  // repeated .tutorial.AllTypes data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->data(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tutorial.DataArray)
  return target;
}

int DataArray::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.DataArray)
  int total_size = 0;

  // repeated .tutorial.AllTypes data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.DataArray)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DataArray* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DataArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.DataArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.DataArray)
    MergeFrom(*source);
  }
}

void DataArray::MergeFrom(const DataArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.DataArray)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  data_.MergeFrom(from.data_);
}

void DataArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.DataArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataArray::CopyFrom(const DataArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.DataArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataArray::IsInitialized() const {

  return true;
}

void DataArray::Swap(DataArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataArray::InternalSwap(DataArray* other) {
  data_.UnsafeArenaSwap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataArray_descriptor_;
  metadata.reflection = DataArray_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataArray

// repeated .tutorial.AllTypes data = 1;
int DataArray::data_size() const {
  return data_.size();
}
void DataArray::clear_data() {
  data_.Clear();
}
const ::tutorial::AllTypes& DataArray::data(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.DataArray.data)
  return data_.Get(index);
}
::tutorial::AllTypes* DataArray::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:tutorial.DataArray.data)
  return data_.Mutable(index);
}
::tutorial::AllTypes* DataArray::add_data() {
  // @@protoc_insertion_point(field_add:tutorial.DataArray.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::tutorial::AllTypes >*
DataArray::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.DataArray.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::tutorial::AllTypes >&
DataArray::data() const {
  // @@protoc_insertion_point(field_list:tutorial.DataArray.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

// @@protoc_insertion_point(global_scope)
