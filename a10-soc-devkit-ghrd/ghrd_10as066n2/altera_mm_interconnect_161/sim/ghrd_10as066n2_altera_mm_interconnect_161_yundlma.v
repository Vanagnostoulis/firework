// ghrd_10as066n2_altera_mm_interconnect_161_yundlma.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 196

`timescale 1 ps / 1 ps
module ghrd_10as066n2_altera_mm_interconnect_161_yundlma (
		input  wire [3:0]  arria10_hps_0_h2f_axi_master_awid,                       //                      arria10_hps_0_h2f_axi_master.awid
		input  wire [31:0] arria10_hps_0_h2f_axi_master_awaddr,                     //                                                  .awaddr
		input  wire [3:0]  arria10_hps_0_h2f_axi_master_awlen,                      //                                                  .awlen
		input  wire [2:0]  arria10_hps_0_h2f_axi_master_awsize,                     //                                                  .awsize
		input  wire [1:0]  arria10_hps_0_h2f_axi_master_awburst,                    //                                                  .awburst
		input  wire [1:0]  arria10_hps_0_h2f_axi_master_awlock,                     //                                                  .awlock
		input  wire [3:0]  arria10_hps_0_h2f_axi_master_awcache,                    //                                                  .awcache
		input  wire [2:0]  arria10_hps_0_h2f_axi_master_awprot,                     //                                                  .awprot
		input  wire [4:0]  arria10_hps_0_h2f_axi_master_awuser,                     //                                                  .awuser
		input  wire        arria10_hps_0_h2f_axi_master_awvalid,                    //                                                  .awvalid
		output wire        arria10_hps_0_h2f_axi_master_awready,                    //                                                  .awready
		input  wire [3:0]  arria10_hps_0_h2f_axi_master_wid,                        //                                                  .wid
		input  wire [31:0] arria10_hps_0_h2f_axi_master_wdata,                      //                                                  .wdata
		input  wire [3:0]  arria10_hps_0_h2f_axi_master_wstrb,                      //                                                  .wstrb
		input  wire        arria10_hps_0_h2f_axi_master_wlast,                      //                                                  .wlast
		input  wire        arria10_hps_0_h2f_axi_master_wvalid,                     //                                                  .wvalid
		output wire        arria10_hps_0_h2f_axi_master_wready,                     //                                                  .wready
		output wire [3:0]  arria10_hps_0_h2f_axi_master_bid,                        //                                                  .bid
		output wire [1:0]  arria10_hps_0_h2f_axi_master_bresp,                      //                                                  .bresp
		output wire        arria10_hps_0_h2f_axi_master_bvalid,                     //                                                  .bvalid
		input  wire        arria10_hps_0_h2f_axi_master_bready,                     //                                                  .bready
		input  wire [3:0]  arria10_hps_0_h2f_axi_master_arid,                       //                                                  .arid
		input  wire [31:0] arria10_hps_0_h2f_axi_master_araddr,                     //                                                  .araddr
		input  wire [3:0]  arria10_hps_0_h2f_axi_master_arlen,                      //                                                  .arlen
		input  wire [2:0]  arria10_hps_0_h2f_axi_master_arsize,                     //                                                  .arsize
		input  wire [1:0]  arria10_hps_0_h2f_axi_master_arburst,                    //                                                  .arburst
		input  wire [1:0]  arria10_hps_0_h2f_axi_master_arlock,                     //                                                  .arlock
		input  wire [3:0]  arria10_hps_0_h2f_axi_master_arcache,                    //                                                  .arcache
		input  wire [2:0]  arria10_hps_0_h2f_axi_master_arprot,                     //                                                  .arprot
		input  wire [4:0]  arria10_hps_0_h2f_axi_master_aruser,                     //                                                  .aruser
		input  wire        arria10_hps_0_h2f_axi_master_arvalid,                    //                                                  .arvalid
		output wire        arria10_hps_0_h2f_axi_master_arready,                    //                                                  .arready
		output wire [3:0]  arria10_hps_0_h2f_axi_master_rid,                        //                                                  .rid
		output wire [31:0] arria10_hps_0_h2f_axi_master_rdata,                      //                                                  .rdata
		output wire [1:0]  arria10_hps_0_h2f_axi_master_rresp,                      //                                                  .rresp
		output wire        arria10_hps_0_h2f_axi_master_rlast,                      //                                                  .rlast
		output wire        arria10_hps_0_h2f_axi_master_rvalid,                     //                                                  .rvalid
		input  wire        arria10_hps_0_h2f_axi_master_rready,                     //                                                  .rready
		output wire [3:0]  protobuf_serializer_0_s0_awid,                           //                          protobuf_serializer_0_s0.awid
		output wire [15:0] protobuf_serializer_0_s0_awaddr,                         //                                                  .awaddr
		output wire [7:0]  protobuf_serializer_0_s0_awlen,                          //                                                  .awlen
		output wire [2:0]  protobuf_serializer_0_s0_awsize,                         //                                                  .awsize
		output wire [1:0]  protobuf_serializer_0_s0_awburst,                        //                                                  .awburst
		output wire        protobuf_serializer_0_s0_awvalid,                        //                                                  .awvalid
		input  wire        protobuf_serializer_0_s0_awready,                        //                                                  .awready
		output wire [31:0] protobuf_serializer_0_s0_wdata,                          //                                                  .wdata
		output wire [3:0]  protobuf_serializer_0_s0_wstrb,                          //                                                  .wstrb
		output wire        protobuf_serializer_0_s0_wvalid,                         //                                                  .wvalid
		input  wire        protobuf_serializer_0_s0_wready,                         //                                                  .wready
		input  wire [3:0]  protobuf_serializer_0_s0_bid,                            //                                                  .bid
		input  wire        protobuf_serializer_0_s0_bvalid,                         //                                                  .bvalid
		output wire        protobuf_serializer_0_s0_bready,                         //                                                  .bready
		output wire [3:0]  protobuf_serializer_0_s0_arid,                           //                                                  .arid
		output wire [15:0] protobuf_serializer_0_s0_araddr,                         //                                                  .araddr
		output wire [7:0]  protobuf_serializer_0_s0_arlen,                          //                                                  .arlen
		output wire [2:0]  protobuf_serializer_0_s0_arsize,                         //                                                  .arsize
		output wire [1:0]  protobuf_serializer_0_s0_arburst,                        //                                                  .arburst
		output wire        protobuf_serializer_0_s0_arvalid,                        //                                                  .arvalid
		input  wire        protobuf_serializer_0_s0_arready,                        //                                                  .arready
		input  wire [3:0]  protobuf_serializer_0_s0_rid,                            //                                                  .rid
		input  wire [31:0] protobuf_serializer_0_s0_rdata,                          //                                                  .rdata
		input  wire        protobuf_serializer_0_s0_rlast,                          //                                                  .rlast
		input  wire        protobuf_serializer_0_s0_rvalid,                         //                                                  .rvalid
		output wire        protobuf_serializer_0_s0_rready,                         //                                                  .rready
		input  wire        clk_0_clk_clk,                                           //                                         clk_0_clk.clk
		input  wire        arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset, // arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset.reset
		output wire [17:0] onchip_memory2_0_s1_address,                             //                               onchip_memory2_0_s1.address
		output wire        onchip_memory2_0_s1_write,                               //                                                  .write
		input  wire [7:0]  onchip_memory2_0_s1_readdata,                            //                                                  .readdata
		output wire [7:0]  onchip_memory2_0_s1_writedata,                           //                                                  .writedata
		output wire        onchip_memory2_0_s1_chipselect,                          //                                                  .chipselect
		output wire        onchip_memory2_0_s1_clken                                //                                                  .clken
	);

	wire    [0:0] protobuf_serializer_0_s0_agent_altera_axi_master_ruser;        // protobuf_serializer_0_s0_translator:s0_ruser -> protobuf_serializer_0_s0_agent:ruser
	wire    [0:0] protobuf_serializer_0_s0_agent_altera_axi_master_wuser;        // protobuf_serializer_0_s0_agent:wuser -> protobuf_serializer_0_s0_translator:s0_wuser
	wire    [1:0] protobuf_serializer_0_s0_agent_altera_axi_master_awburst;      // protobuf_serializer_0_s0_agent:awburst -> protobuf_serializer_0_s0_translator:s0_awburst
	wire    [3:0] protobuf_serializer_0_s0_agent_altera_axi_master_arregion;     // protobuf_serializer_0_s0_agent:arregion -> protobuf_serializer_0_s0_translator:s0_arregion
	wire    [4:0] protobuf_serializer_0_s0_agent_altera_axi_master_awuser;       // protobuf_serializer_0_s0_agent:awuser -> protobuf_serializer_0_s0_translator:s0_awuser
	wire    [7:0] protobuf_serializer_0_s0_agent_altera_axi_master_arlen;        // protobuf_serializer_0_s0_agent:arlen -> protobuf_serializer_0_s0_translator:s0_arlen
	wire    [3:0] protobuf_serializer_0_s0_agent_altera_axi_master_arqos;        // protobuf_serializer_0_s0_agent:arqos -> protobuf_serializer_0_s0_translator:s0_arqos
	wire    [3:0] protobuf_serializer_0_s0_agent_altera_axi_master_wstrb;        // protobuf_serializer_0_s0_agent:wstrb -> protobuf_serializer_0_s0_translator:s0_wstrb
	wire          protobuf_serializer_0_s0_agent_altera_axi_master_wready;       // protobuf_serializer_0_s0_translator:s0_wready -> protobuf_serializer_0_s0_agent:wready
	wire    [3:0] protobuf_serializer_0_s0_agent_altera_axi_master_rid;          // protobuf_serializer_0_s0_translator:s0_rid -> protobuf_serializer_0_s0_agent:rid
	wire          protobuf_serializer_0_s0_agent_altera_axi_master_rready;       // protobuf_serializer_0_s0_agent:rready -> protobuf_serializer_0_s0_translator:s0_rready
	wire    [7:0] protobuf_serializer_0_s0_agent_altera_axi_master_awlen;        // protobuf_serializer_0_s0_agent:awlen -> protobuf_serializer_0_s0_translator:s0_awlen
	wire    [3:0] protobuf_serializer_0_s0_agent_altera_axi_master_awqos;        // protobuf_serializer_0_s0_agent:awqos -> protobuf_serializer_0_s0_translator:s0_awqos
	wire    [3:0] protobuf_serializer_0_s0_agent_altera_axi_master_arcache;      // protobuf_serializer_0_s0_agent:arcache -> protobuf_serializer_0_s0_translator:s0_arcache
	wire          protobuf_serializer_0_s0_agent_altera_axi_master_wvalid;       // protobuf_serializer_0_s0_agent:wvalid -> protobuf_serializer_0_s0_translator:s0_wvalid
	wire   [15:0] protobuf_serializer_0_s0_agent_altera_axi_master_araddr;       // protobuf_serializer_0_s0_agent:araddr -> protobuf_serializer_0_s0_translator:s0_araddr
	wire    [2:0] protobuf_serializer_0_s0_agent_altera_axi_master_arprot;       // protobuf_serializer_0_s0_agent:arprot -> protobuf_serializer_0_s0_translator:s0_arprot
	wire    [2:0] protobuf_serializer_0_s0_agent_altera_axi_master_awprot;       // protobuf_serializer_0_s0_agent:awprot -> protobuf_serializer_0_s0_translator:s0_awprot
	wire   [31:0] protobuf_serializer_0_s0_agent_altera_axi_master_wdata;        // protobuf_serializer_0_s0_agent:wdata -> protobuf_serializer_0_s0_translator:s0_wdata
	wire          protobuf_serializer_0_s0_agent_altera_axi_master_arvalid;      // protobuf_serializer_0_s0_agent:arvalid -> protobuf_serializer_0_s0_translator:s0_arvalid
	wire    [3:0] protobuf_serializer_0_s0_agent_altera_axi_master_awcache;      // protobuf_serializer_0_s0_agent:awcache -> protobuf_serializer_0_s0_translator:s0_awcache
	wire    [3:0] protobuf_serializer_0_s0_agent_altera_axi_master_arid;         // protobuf_serializer_0_s0_agent:arid -> protobuf_serializer_0_s0_translator:s0_arid
	wire    [0:0] protobuf_serializer_0_s0_agent_altera_axi_master_arlock;       // protobuf_serializer_0_s0_agent:arlock -> protobuf_serializer_0_s0_translator:s0_arlock
	wire    [0:0] protobuf_serializer_0_s0_agent_altera_axi_master_awlock;       // protobuf_serializer_0_s0_agent:awlock -> protobuf_serializer_0_s0_translator:s0_awlock
	wire   [15:0] protobuf_serializer_0_s0_agent_altera_axi_master_awaddr;       // protobuf_serializer_0_s0_agent:awaddr -> protobuf_serializer_0_s0_translator:s0_awaddr
	wire    [1:0] protobuf_serializer_0_s0_agent_altera_axi_master_bresp;        // protobuf_serializer_0_s0_translator:s0_bresp -> protobuf_serializer_0_s0_agent:bresp
	wire          protobuf_serializer_0_s0_agent_altera_axi_master_arready;      // protobuf_serializer_0_s0_translator:s0_arready -> protobuf_serializer_0_s0_agent:arready
	wire   [31:0] protobuf_serializer_0_s0_agent_altera_axi_master_rdata;        // protobuf_serializer_0_s0_translator:s0_rdata -> protobuf_serializer_0_s0_agent:rdata
	wire          protobuf_serializer_0_s0_agent_altera_axi_master_awready;      // protobuf_serializer_0_s0_translator:s0_awready -> protobuf_serializer_0_s0_agent:awready
	wire    [1:0] protobuf_serializer_0_s0_agent_altera_axi_master_arburst;      // protobuf_serializer_0_s0_agent:arburst -> protobuf_serializer_0_s0_translator:s0_arburst
	wire    [2:0] protobuf_serializer_0_s0_agent_altera_axi_master_arsize;       // protobuf_serializer_0_s0_agent:arsize -> protobuf_serializer_0_s0_translator:s0_arsize
	wire          protobuf_serializer_0_s0_agent_altera_axi_master_bready;       // protobuf_serializer_0_s0_agent:bready -> protobuf_serializer_0_s0_translator:s0_bready
	wire          protobuf_serializer_0_s0_agent_altera_axi_master_rlast;        // protobuf_serializer_0_s0_translator:s0_rlast -> protobuf_serializer_0_s0_agent:rlast
	wire          protobuf_serializer_0_s0_agent_altera_axi_master_wlast;        // protobuf_serializer_0_s0_agent:wlast -> protobuf_serializer_0_s0_translator:s0_wlast
	wire    [3:0] protobuf_serializer_0_s0_agent_altera_axi_master_awregion;     // protobuf_serializer_0_s0_agent:awregion -> protobuf_serializer_0_s0_translator:s0_awregion
	wire    [0:0] protobuf_serializer_0_s0_agent_altera_axi_master_buser;        // protobuf_serializer_0_s0_translator:s0_buser -> protobuf_serializer_0_s0_agent:buser
	wire    [1:0] protobuf_serializer_0_s0_agent_altera_axi_master_rresp;        // protobuf_serializer_0_s0_translator:s0_rresp -> protobuf_serializer_0_s0_agent:rresp
	wire    [3:0] protobuf_serializer_0_s0_agent_altera_axi_master_awid;         // protobuf_serializer_0_s0_agent:awid -> protobuf_serializer_0_s0_translator:s0_awid
	wire    [3:0] protobuf_serializer_0_s0_agent_altera_axi_master_bid;          // protobuf_serializer_0_s0_translator:s0_bid -> protobuf_serializer_0_s0_agent:bid
	wire          protobuf_serializer_0_s0_agent_altera_axi_master_bvalid;       // protobuf_serializer_0_s0_translator:s0_bvalid -> protobuf_serializer_0_s0_agent:bvalid
	wire    [2:0] protobuf_serializer_0_s0_agent_altera_axi_master_awsize;       // protobuf_serializer_0_s0_agent:awsize -> protobuf_serializer_0_s0_translator:s0_awsize
	wire          protobuf_serializer_0_s0_agent_altera_axi_master_awvalid;      // protobuf_serializer_0_s0_agent:awvalid -> protobuf_serializer_0_s0_translator:s0_awvalid
	wire    [4:0] protobuf_serializer_0_s0_agent_altera_axi_master_aruser;       // protobuf_serializer_0_s0_agent:aruser -> protobuf_serializer_0_s0_translator:s0_aruser
	wire          protobuf_serializer_0_s0_agent_altera_axi_master_rvalid;       // protobuf_serializer_0_s0_translator:s0_rvalid -> protobuf_serializer_0_s0_agent:rvalid
	wire    [7:0] onchip_memory2_0_s1_agent_m0_readdata;                         // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	wire          onchip_memory2_0_s1_agent_m0_waitrequest;                      // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	wire          onchip_memory2_0_s1_agent_m0_debugaccess;                      // onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire   [31:0] onchip_memory2_0_s1_agent_m0_address;                          // onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire    [0:0] onchip_memory2_0_s1_agent_m0_byteenable;                       // onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire          onchip_memory2_0_s1_agent_m0_read;                             // onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire          onchip_memory2_0_s1_agent_m0_readdatavalid;                    // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	wire          onchip_memory2_0_s1_agent_m0_lock;                             // onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire    [7:0] onchip_memory2_0_s1_agent_m0_writedata;                        // onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire          onchip_memory2_0_s1_agent_m0_write;                            // onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire    [0:0] onchip_memory2_0_s1_agent_m0_burstcount;                       // onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire          onchip_memory2_0_s1_agent_rf_source_valid;                     // onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	wire   [99:0] onchip_memory2_0_s1_agent_rf_source_data;                      // onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rf_source_ready;                     // onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	wire          onchip_memory2_0_s1_agent_rf_source_startofpacket;             // onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_0_s1_agent_rf_source_endofpacket;               // onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_valid;                  // onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	wire   [99:0] onchip_memory2_0_s1_agent_rsp_fifo_out_data;                   // onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_ready;                  // onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket;          // onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket;            // onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_valid;                // onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> onchip_memory2_0_s1_agent_rdata_fifo:in_valid
	wire    [9:0] onchip_memory2_0_s1_agent_rdata_fifo_src_data;                 // onchip_memory2_0_s1_agent:rdata_fifo_src_data -> onchip_memory2_0_s1_agent_rdata_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_ready;                // onchip_memory2_0_s1_agent_rdata_fifo:in_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	wire          router_002_src_valid;                                          // router_002:src_valid -> rsp_demux:sink_valid
	wire  [125:0] router_002_src_data;                                           // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                          // rsp_demux:sink_ready -> router_002:src_ready
	wire    [2:0] router_002_src_channel;                                        // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                  // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                    // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_003_src_valid;                                          // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [125:0] router_003_src_data;                                           // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                          // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [2:0] router_003_src_channel;                                        // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                  // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                    // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_src_valid;                                              // router:src_valid -> arria10_hps_0_h2f_axi_master_wr_limiter:cmd_sink_valid
	wire  [125:0] router_src_data;                                               // router:src_data -> arria10_hps_0_h2f_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                              // arria10_hps_0_h2f_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire    [2:0] router_src_channel;                                            // router:src_channel -> arria10_hps_0_h2f_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                      // router:src_startofpacket -> arria10_hps_0_h2f_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                        // router:src_endofpacket -> arria10_hps_0_h2f_axi_master_wr_limiter:cmd_sink_endofpacket
	wire          arria10_hps_0_h2f_axi_master_wr_limiter_rsp_src_valid;         // arria10_hps_0_h2f_axi_master_wr_limiter:rsp_src_valid -> arria10_hps_0_h2f_axi_master_agent:write_rp_valid
	wire  [125:0] arria10_hps_0_h2f_axi_master_wr_limiter_rsp_src_data;          // arria10_hps_0_h2f_axi_master_wr_limiter:rsp_src_data -> arria10_hps_0_h2f_axi_master_agent:write_rp_data
	wire          arria10_hps_0_h2f_axi_master_wr_limiter_rsp_src_ready;         // arria10_hps_0_h2f_axi_master_agent:write_rp_ready -> arria10_hps_0_h2f_axi_master_wr_limiter:rsp_src_ready
	wire    [2:0] arria10_hps_0_h2f_axi_master_wr_limiter_rsp_src_channel;       // arria10_hps_0_h2f_axi_master_wr_limiter:rsp_src_channel -> arria10_hps_0_h2f_axi_master_agent:write_rp_channel
	wire          arria10_hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket; // arria10_hps_0_h2f_axi_master_wr_limiter:rsp_src_startofpacket -> arria10_hps_0_h2f_axi_master_agent:write_rp_startofpacket
	wire          arria10_hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket;   // arria10_hps_0_h2f_axi_master_wr_limiter:rsp_src_endofpacket -> arria10_hps_0_h2f_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                          // router_001:src_valid -> arria10_hps_0_h2f_axi_master_rd_limiter:cmd_sink_valid
	wire  [125:0] router_001_src_data;                                           // router_001:src_data -> arria10_hps_0_h2f_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                          // arria10_hps_0_h2f_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [2:0] router_001_src_channel;                                        // router_001:src_channel -> arria10_hps_0_h2f_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                  // router_001:src_startofpacket -> arria10_hps_0_h2f_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                    // router_001:src_endofpacket -> arria10_hps_0_h2f_axi_master_rd_limiter:cmd_sink_endofpacket
	wire          arria10_hps_0_h2f_axi_master_rd_limiter_rsp_src_valid;         // arria10_hps_0_h2f_axi_master_rd_limiter:rsp_src_valid -> arria10_hps_0_h2f_axi_master_agent:read_rp_valid
	wire  [125:0] arria10_hps_0_h2f_axi_master_rd_limiter_rsp_src_data;          // arria10_hps_0_h2f_axi_master_rd_limiter:rsp_src_data -> arria10_hps_0_h2f_axi_master_agent:read_rp_data
	wire          arria10_hps_0_h2f_axi_master_rd_limiter_rsp_src_ready;         // arria10_hps_0_h2f_axi_master_agent:read_rp_ready -> arria10_hps_0_h2f_axi_master_rd_limiter:rsp_src_ready
	wire    [2:0] arria10_hps_0_h2f_axi_master_rd_limiter_rsp_src_channel;       // arria10_hps_0_h2f_axi_master_rd_limiter:rsp_src_channel -> arria10_hps_0_h2f_axi_master_agent:read_rp_channel
	wire          arria10_hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket; // arria10_hps_0_h2f_axi_master_rd_limiter:rsp_src_startofpacket -> arria10_hps_0_h2f_axi_master_agent:read_rp_startofpacket
	wire          arria10_hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket;   // arria10_hps_0_h2f_axi_master_rd_limiter:rsp_src_endofpacket -> arria10_hps_0_h2f_axi_master_agent:read_rp_endofpacket
	wire          router_004_src_valid;                                          // router_004:src_valid -> onchip_memory2_0_s1_rsp_width_adapter:in_valid
	wire   [98:0] router_004_src_data;                                           // router_004:src_data -> onchip_memory2_0_s1_rsp_width_adapter:in_data
	wire          router_004_src_ready;                                          // onchip_memory2_0_s1_rsp_width_adapter:in_ready -> router_004:src_ready
	wire    [2:0] router_004_src_channel;                                        // router_004:src_channel -> onchip_memory2_0_s1_rsp_width_adapter:in_channel
	wire          router_004_src_startofpacket;                                  // router_004:src_startofpacket -> onchip_memory2_0_s1_rsp_width_adapter:in_startofpacket
	wire          router_004_src_endofpacket;                                    // router_004:src_endofpacket -> onchip_memory2_0_s1_rsp_width_adapter:in_endofpacket
	wire          onchip_memory2_0_s1_rsp_width_adapter_src_valid;               // onchip_memory2_0_s1_rsp_width_adapter:out_valid -> rsp_demux_002:sink_valid
	wire  [125:0] onchip_memory2_0_s1_rsp_width_adapter_src_data;                // onchip_memory2_0_s1_rsp_width_adapter:out_data -> rsp_demux_002:sink_data
	wire          onchip_memory2_0_s1_rsp_width_adapter_src_ready;               // rsp_demux_002:sink_ready -> onchip_memory2_0_s1_rsp_width_adapter:out_ready
	wire    [2:0] onchip_memory2_0_s1_rsp_width_adapter_src_channel;             // onchip_memory2_0_s1_rsp_width_adapter:out_channel -> rsp_demux_002:sink_channel
	wire          onchip_memory2_0_s1_rsp_width_adapter_src_startofpacket;       // onchip_memory2_0_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          onchip_memory2_0_s1_rsp_width_adapter_src_endofpacket;         // onchip_memory2_0_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          cmd_mux_002_src_valid;                                         // cmd_mux_002:src_valid -> onchip_memory2_0_s1_cmd_width_adapter:in_valid
	wire  [125:0] cmd_mux_002_src_data;                                          // cmd_mux_002:src_data -> onchip_memory2_0_s1_cmd_width_adapter:in_data
	wire          cmd_mux_002_src_ready;                                         // onchip_memory2_0_s1_cmd_width_adapter:in_ready -> cmd_mux_002:src_ready
	wire    [2:0] cmd_mux_002_src_channel;                                       // cmd_mux_002:src_channel -> onchip_memory2_0_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_002_src_startofpacket;                                 // cmd_mux_002:src_startofpacket -> onchip_memory2_0_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                   // cmd_mux_002:src_endofpacket -> onchip_memory2_0_s1_cmd_width_adapter:in_endofpacket
	wire          onchip_memory2_0_s1_cmd_width_adapter_src_valid;               // onchip_memory2_0_s1_cmd_width_adapter:out_valid -> onchip_memory2_0_s1_burst_adapter:sink0_valid
	wire   [98:0] onchip_memory2_0_s1_cmd_width_adapter_src_data;                // onchip_memory2_0_s1_cmd_width_adapter:out_data -> onchip_memory2_0_s1_burst_adapter:sink0_data
	wire          onchip_memory2_0_s1_cmd_width_adapter_src_ready;               // onchip_memory2_0_s1_burst_adapter:sink0_ready -> onchip_memory2_0_s1_cmd_width_adapter:out_ready
	wire    [2:0] onchip_memory2_0_s1_cmd_width_adapter_src_channel;             // onchip_memory2_0_s1_cmd_width_adapter:out_channel -> onchip_memory2_0_s1_burst_adapter:sink0_channel
	wire          onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket;       // onchip_memory2_0_s1_cmd_width_adapter:out_startofpacket -> onchip_memory2_0_s1_burst_adapter:sink0_startofpacket
	wire          onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket;         // onchip_memory2_0_s1_cmd_width_adapter:out_endofpacket -> onchip_memory2_0_s1_burst_adapter:sink0_endofpacket
	wire    [0:0] arria10_hps_0_h2f_axi_master_wr_limiter_cmd_src_valid;         // arria10_hps_0_h2f_axi_master_wr_limiter:cmd_src_valid -> limiter_pipeline:in_valid
	wire  [125:0] arria10_hps_0_h2f_axi_master_wr_limiter_cmd_src_data;          // arria10_hps_0_h2f_axi_master_wr_limiter:cmd_src_data -> limiter_pipeline:in_data
	wire          arria10_hps_0_h2f_axi_master_wr_limiter_cmd_src_ready;         // limiter_pipeline:in_ready -> arria10_hps_0_h2f_axi_master_wr_limiter:cmd_src_ready
	wire    [2:0] arria10_hps_0_h2f_axi_master_wr_limiter_cmd_src_channel;       // arria10_hps_0_h2f_axi_master_wr_limiter:cmd_src_channel -> limiter_pipeline:in_channel
	wire          arria10_hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket; // arria10_hps_0_h2f_axi_master_wr_limiter:cmd_src_startofpacket -> limiter_pipeline:in_startofpacket
	wire          arria10_hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket;   // arria10_hps_0_h2f_axi_master_wr_limiter:cmd_src_endofpacket -> limiter_pipeline:in_endofpacket
	wire          limiter_pipeline_source0_valid;                                // limiter_pipeline:out_valid -> cmd_demux:sink_valid
	wire  [125:0] limiter_pipeline_source0_data;                                 // limiter_pipeline:out_data -> cmd_demux:sink_data
	wire          limiter_pipeline_source0_ready;                                // cmd_demux:sink_ready -> limiter_pipeline:out_ready
	wire    [2:0] limiter_pipeline_source0_channel;                              // limiter_pipeline:out_channel -> cmd_demux:sink_channel
	wire          limiter_pipeline_source0_startofpacket;                        // limiter_pipeline:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          limiter_pipeline_source0_endofpacket;                          // limiter_pipeline:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                             // rsp_mux:src_valid -> limiter_pipeline_001:in_valid
	wire  [125:0] rsp_mux_src_data;                                              // rsp_mux:src_data -> limiter_pipeline_001:in_data
	wire          rsp_mux_src_ready;                                             // limiter_pipeline_001:in_ready -> rsp_mux:src_ready
	wire    [2:0] rsp_mux_src_channel;                                           // rsp_mux:src_channel -> limiter_pipeline_001:in_channel
	wire          rsp_mux_src_startofpacket;                                     // rsp_mux:src_startofpacket -> limiter_pipeline_001:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                       // rsp_mux:src_endofpacket -> limiter_pipeline_001:in_endofpacket
	wire          limiter_pipeline_001_source0_valid;                            // limiter_pipeline_001:out_valid -> arria10_hps_0_h2f_axi_master_wr_limiter:rsp_sink_valid
	wire  [125:0] limiter_pipeline_001_source0_data;                             // limiter_pipeline_001:out_data -> arria10_hps_0_h2f_axi_master_wr_limiter:rsp_sink_data
	wire          limiter_pipeline_001_source0_ready;                            // arria10_hps_0_h2f_axi_master_wr_limiter:rsp_sink_ready -> limiter_pipeline_001:out_ready
	wire    [2:0] limiter_pipeline_001_source0_channel;                          // limiter_pipeline_001:out_channel -> arria10_hps_0_h2f_axi_master_wr_limiter:rsp_sink_channel
	wire          limiter_pipeline_001_source0_startofpacket;                    // limiter_pipeline_001:out_startofpacket -> arria10_hps_0_h2f_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_001_source0_endofpacket;                      // limiter_pipeline_001:out_endofpacket -> arria10_hps_0_h2f_axi_master_wr_limiter:rsp_sink_endofpacket
	wire    [0:0] arria10_hps_0_h2f_axi_master_rd_limiter_cmd_src_valid;         // arria10_hps_0_h2f_axi_master_rd_limiter:cmd_src_valid -> limiter_pipeline_002:in_valid
	wire  [125:0] arria10_hps_0_h2f_axi_master_rd_limiter_cmd_src_data;          // arria10_hps_0_h2f_axi_master_rd_limiter:cmd_src_data -> limiter_pipeline_002:in_data
	wire          arria10_hps_0_h2f_axi_master_rd_limiter_cmd_src_ready;         // limiter_pipeline_002:in_ready -> arria10_hps_0_h2f_axi_master_rd_limiter:cmd_src_ready
	wire    [2:0] arria10_hps_0_h2f_axi_master_rd_limiter_cmd_src_channel;       // arria10_hps_0_h2f_axi_master_rd_limiter:cmd_src_channel -> limiter_pipeline_002:in_channel
	wire          arria10_hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket; // arria10_hps_0_h2f_axi_master_rd_limiter:cmd_src_startofpacket -> limiter_pipeline_002:in_startofpacket
	wire          arria10_hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket;   // arria10_hps_0_h2f_axi_master_rd_limiter:cmd_src_endofpacket -> limiter_pipeline_002:in_endofpacket
	wire          limiter_pipeline_002_source0_valid;                            // limiter_pipeline_002:out_valid -> cmd_demux_001:sink_valid
	wire  [125:0] limiter_pipeline_002_source0_data;                             // limiter_pipeline_002:out_data -> cmd_demux_001:sink_data
	wire          limiter_pipeline_002_source0_ready;                            // cmd_demux_001:sink_ready -> limiter_pipeline_002:out_ready
	wire    [2:0] limiter_pipeline_002_source0_channel;                          // limiter_pipeline_002:out_channel -> cmd_demux_001:sink_channel
	wire          limiter_pipeline_002_source0_startofpacket;                    // limiter_pipeline_002:out_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          limiter_pipeline_002_source0_endofpacket;                      // limiter_pipeline_002:out_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                         // rsp_mux_001:src_valid -> limiter_pipeline_003:in_valid
	wire  [125:0] rsp_mux_001_src_data;                                          // rsp_mux_001:src_data -> limiter_pipeline_003:in_data
	wire          rsp_mux_001_src_ready;                                         // limiter_pipeline_003:in_ready -> rsp_mux_001:src_ready
	wire    [2:0] rsp_mux_001_src_channel;                                       // rsp_mux_001:src_channel -> limiter_pipeline_003:in_channel
	wire          rsp_mux_001_src_startofpacket;                                 // rsp_mux_001:src_startofpacket -> limiter_pipeline_003:in_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                   // rsp_mux_001:src_endofpacket -> limiter_pipeline_003:in_endofpacket
	wire          limiter_pipeline_003_source0_valid;                            // limiter_pipeline_003:out_valid -> arria10_hps_0_h2f_axi_master_rd_limiter:rsp_sink_valid
	wire  [125:0] limiter_pipeline_003_source0_data;                             // limiter_pipeline_003:out_data -> arria10_hps_0_h2f_axi_master_rd_limiter:rsp_sink_data
	wire          limiter_pipeline_003_source0_ready;                            // arria10_hps_0_h2f_axi_master_rd_limiter:rsp_sink_ready -> limiter_pipeline_003:out_ready
	wire    [2:0] limiter_pipeline_003_source0_channel;                          // limiter_pipeline_003:out_channel -> arria10_hps_0_h2f_axi_master_rd_limiter:rsp_sink_channel
	wire          limiter_pipeline_003_source0_startofpacket;                    // limiter_pipeline_003:out_startofpacket -> arria10_hps_0_h2f_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_003_source0_endofpacket;                      // limiter_pipeline_003:out_endofpacket -> arria10_hps_0_h2f_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          cmd_mux_src_valid;                                             // cmd_mux:src_valid -> agent_pipeline:in_valid
	wire  [125:0] cmd_mux_src_data;                                              // cmd_mux:src_data -> agent_pipeline:in_data
	wire          cmd_mux_src_ready;                                             // agent_pipeline:in_ready -> cmd_mux:src_ready
	wire    [2:0] cmd_mux_src_channel;                                           // cmd_mux:src_channel -> agent_pipeline:in_channel
	wire          cmd_mux_src_startofpacket;                                     // cmd_mux:src_startofpacket -> agent_pipeline:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                       // cmd_mux:src_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                                  // agent_pipeline:out_valid -> protobuf_serializer_0_s0_agent:write_cp_valid
	wire  [125:0] agent_pipeline_source0_data;                                   // agent_pipeline:out_data -> protobuf_serializer_0_s0_agent:write_cp_data
	wire          agent_pipeline_source0_ready;                                  // protobuf_serializer_0_s0_agent:write_cp_ready -> agent_pipeline:out_ready
	wire    [2:0] agent_pipeline_source0_channel;                                // agent_pipeline:out_channel -> protobuf_serializer_0_s0_agent:write_cp_channel
	wire          agent_pipeline_source0_startofpacket;                          // agent_pipeline:out_startofpacket -> protobuf_serializer_0_s0_agent:write_cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                            // agent_pipeline:out_endofpacket -> protobuf_serializer_0_s0_agent:write_cp_endofpacket
	wire          cmd_mux_001_src_valid;                                         // cmd_mux_001:src_valid -> agent_pipeline_001:in_valid
	wire  [125:0] cmd_mux_001_src_data;                                          // cmd_mux_001:src_data -> agent_pipeline_001:in_data
	wire          cmd_mux_001_src_ready;                                         // agent_pipeline_001:in_ready -> cmd_mux_001:src_ready
	wire    [2:0] cmd_mux_001_src_channel;                                       // cmd_mux_001:src_channel -> agent_pipeline_001:in_channel
	wire          cmd_mux_001_src_startofpacket;                                 // cmd_mux_001:src_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                   // cmd_mux_001:src_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                              // agent_pipeline_001:out_valid -> protobuf_serializer_0_s0_agent:read_cp_valid
	wire  [125:0] agent_pipeline_001_source0_data;                               // agent_pipeline_001:out_data -> protobuf_serializer_0_s0_agent:read_cp_data
	wire          agent_pipeline_001_source0_ready;                              // protobuf_serializer_0_s0_agent:read_cp_ready -> agent_pipeline_001:out_ready
	wire    [2:0] agent_pipeline_001_source0_channel;                            // agent_pipeline_001:out_channel -> protobuf_serializer_0_s0_agent:read_cp_channel
	wire          agent_pipeline_001_source0_startofpacket;                      // agent_pipeline_001:out_startofpacket -> protobuf_serializer_0_s0_agent:read_cp_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                        // agent_pipeline_001:out_endofpacket -> protobuf_serializer_0_s0_agent:read_cp_endofpacket
	wire          protobuf_serializer_0_s0_agent_write_rp_valid;                 // protobuf_serializer_0_s0_agent:write_rp_valid -> agent_pipeline_002:in_valid
	wire  [125:0] protobuf_serializer_0_s0_agent_write_rp_data;                  // protobuf_serializer_0_s0_agent:write_rp_data -> agent_pipeline_002:in_data
	wire          protobuf_serializer_0_s0_agent_write_rp_ready;                 // agent_pipeline_002:in_ready -> protobuf_serializer_0_s0_agent:write_rp_ready
	wire          protobuf_serializer_0_s0_agent_write_rp_startofpacket;         // protobuf_serializer_0_s0_agent:write_rp_startofpacket -> agent_pipeline_002:in_startofpacket
	wire          protobuf_serializer_0_s0_agent_write_rp_endofpacket;           // protobuf_serializer_0_s0_agent:write_rp_endofpacket -> agent_pipeline_002:in_endofpacket
	wire          agent_pipeline_002_source0_valid;                              // agent_pipeline_002:out_valid -> router_002:sink_valid
	wire  [125:0] agent_pipeline_002_source0_data;                               // agent_pipeline_002:out_data -> router_002:sink_data
	wire          agent_pipeline_002_source0_ready;                              // router_002:sink_ready -> agent_pipeline_002:out_ready
	wire          agent_pipeline_002_source0_startofpacket;                      // agent_pipeline_002:out_startofpacket -> router_002:sink_startofpacket
	wire          agent_pipeline_002_source0_endofpacket;                        // agent_pipeline_002:out_endofpacket -> router_002:sink_endofpacket
	wire          protobuf_serializer_0_s0_agent_read_rp_valid;                  // protobuf_serializer_0_s0_agent:read_rp_valid -> agent_pipeline_003:in_valid
	wire  [125:0] protobuf_serializer_0_s0_agent_read_rp_data;                   // protobuf_serializer_0_s0_agent:read_rp_data -> agent_pipeline_003:in_data
	wire          protobuf_serializer_0_s0_agent_read_rp_ready;                  // agent_pipeline_003:in_ready -> protobuf_serializer_0_s0_agent:read_rp_ready
	wire          protobuf_serializer_0_s0_agent_read_rp_startofpacket;          // protobuf_serializer_0_s0_agent:read_rp_startofpacket -> agent_pipeline_003:in_startofpacket
	wire          protobuf_serializer_0_s0_agent_read_rp_endofpacket;            // protobuf_serializer_0_s0_agent:read_rp_endofpacket -> agent_pipeline_003:in_endofpacket
	wire          agent_pipeline_003_source0_valid;                              // agent_pipeline_003:out_valid -> router_003:sink_valid
	wire  [125:0] agent_pipeline_003_source0_data;                               // agent_pipeline_003:out_data -> router_003:sink_data
	wire          agent_pipeline_003_source0_ready;                              // router_003:sink_ready -> agent_pipeline_003:out_ready
	wire          agent_pipeline_003_source0_startofpacket;                      // agent_pipeline_003:out_startofpacket -> router_003:sink_startofpacket
	wire          agent_pipeline_003_source0_endofpacket;                        // agent_pipeline_003:out_endofpacket -> router_003:sink_endofpacket
	wire          onchip_memory2_0_s1_burst_adapter_source0_valid;               // onchip_memory2_0_s1_burst_adapter:source0_valid -> agent_pipeline_004:in_valid
	wire   [98:0] onchip_memory2_0_s1_burst_adapter_source0_data;                // onchip_memory2_0_s1_burst_adapter:source0_data -> agent_pipeline_004:in_data
	wire          onchip_memory2_0_s1_burst_adapter_source0_ready;               // agent_pipeline_004:in_ready -> onchip_memory2_0_s1_burst_adapter:source0_ready
	wire    [2:0] onchip_memory2_0_s1_burst_adapter_source0_channel;             // onchip_memory2_0_s1_burst_adapter:source0_channel -> agent_pipeline_004:in_channel
	wire          onchip_memory2_0_s1_burst_adapter_source0_startofpacket;       // onchip_memory2_0_s1_burst_adapter:source0_startofpacket -> agent_pipeline_004:in_startofpacket
	wire          onchip_memory2_0_s1_burst_adapter_source0_endofpacket;         // onchip_memory2_0_s1_burst_adapter:source0_endofpacket -> agent_pipeline_004:in_endofpacket
	wire          agent_pipeline_004_source0_valid;                              // agent_pipeline_004:out_valid -> onchip_memory2_0_s1_agent:cp_valid
	wire   [98:0] agent_pipeline_004_source0_data;                               // agent_pipeline_004:out_data -> onchip_memory2_0_s1_agent:cp_data
	wire          agent_pipeline_004_source0_ready;                              // onchip_memory2_0_s1_agent:cp_ready -> agent_pipeline_004:out_ready
	wire    [2:0] agent_pipeline_004_source0_channel;                            // agent_pipeline_004:out_channel -> onchip_memory2_0_s1_agent:cp_channel
	wire          agent_pipeline_004_source0_startofpacket;                      // agent_pipeline_004:out_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	wire          agent_pipeline_004_source0_endofpacket;                        // agent_pipeline_004:out_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	wire          onchip_memory2_0_s1_agent_rp_valid;                            // onchip_memory2_0_s1_agent:rp_valid -> agent_pipeline_005:in_valid
	wire   [98:0] onchip_memory2_0_s1_agent_rp_data;                             // onchip_memory2_0_s1_agent:rp_data -> agent_pipeline_005:in_data
	wire          onchip_memory2_0_s1_agent_rp_ready;                            // agent_pipeline_005:in_ready -> onchip_memory2_0_s1_agent:rp_ready
	wire          onchip_memory2_0_s1_agent_rp_startofpacket;                    // onchip_memory2_0_s1_agent:rp_startofpacket -> agent_pipeline_005:in_startofpacket
	wire          onchip_memory2_0_s1_agent_rp_endofpacket;                      // onchip_memory2_0_s1_agent:rp_endofpacket -> agent_pipeline_005:in_endofpacket
	wire          agent_pipeline_005_source0_valid;                              // agent_pipeline_005:out_valid -> router_004:sink_valid
	wire   [98:0] agent_pipeline_005_source0_data;                               // agent_pipeline_005:out_data -> router_004:sink_data
	wire          agent_pipeline_005_source0_ready;                              // router_004:sink_ready -> agent_pipeline_005:out_ready
	wire          agent_pipeline_005_source0_startofpacket;                      // agent_pipeline_005:out_startofpacket -> router_004:sink_startofpacket
	wire          agent_pipeline_005_source0_endofpacket;                        // agent_pipeline_005:out_endofpacket -> router_004:sink_endofpacket
	wire          cmd_demux_src0_valid;                                          // cmd_demux:src0_valid -> mux_pipeline:in_valid
	wire  [125:0] cmd_demux_src0_data;                                           // cmd_demux:src0_data -> mux_pipeline:in_data
	wire          cmd_demux_src0_ready;                                          // mux_pipeline:in_ready -> cmd_demux:src0_ready
	wire    [2:0] cmd_demux_src0_channel;                                        // cmd_demux:src0_channel -> mux_pipeline:in_channel
	wire          cmd_demux_src0_startofpacket;                                  // cmd_demux:src0_startofpacket -> mux_pipeline:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                    // cmd_demux:src0_endofpacket -> mux_pipeline:in_endofpacket
	wire          mux_pipeline_source0_valid;                                    // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire  [125:0] mux_pipeline_source0_data;                                     // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire          mux_pipeline_source0_ready;                                    // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire    [2:0] mux_pipeline_source0_channel;                                  // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_startofpacket;                            // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mux_pipeline_source0_endofpacket;                              // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                      // cmd_demux_001:src0_valid -> mux_pipeline_001:in_valid
	wire  [125:0] cmd_demux_001_src0_data;                                       // cmd_demux_001:src0_data -> mux_pipeline_001:in_data
	wire          cmd_demux_001_src0_ready;                                      // mux_pipeline_001:in_ready -> cmd_demux_001:src0_ready
	wire    [2:0] cmd_demux_001_src0_channel;                                    // cmd_demux_001:src0_channel -> mux_pipeline_001:in_channel
	wire          cmd_demux_001_src0_startofpacket;                              // cmd_demux_001:src0_startofpacket -> mux_pipeline_001:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                // cmd_demux_001:src0_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          mux_pipeline_001_source0_valid;                                // mux_pipeline_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [125:0] mux_pipeline_001_source0_data;                                 // mux_pipeline_001:out_data -> cmd_mux_001:sink0_data
	wire          mux_pipeline_001_source0_ready;                                // cmd_mux_001:sink0_ready -> mux_pipeline_001:out_ready
	wire    [2:0] mux_pipeline_001_source0_channel;                              // mux_pipeline_001:out_channel -> cmd_mux_001:sink0_channel
	wire          mux_pipeline_001_source0_startofpacket;                        // mux_pipeline_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          mux_pipeline_001_source0_endofpacket;                          // mux_pipeline_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                          // cmd_demux:src1_valid -> mux_pipeline_002:in_valid
	wire  [125:0] cmd_demux_src1_data;                                           // cmd_demux:src1_data -> mux_pipeline_002:in_data
	wire          cmd_demux_src1_ready;                                          // mux_pipeline_002:in_ready -> cmd_demux:src1_ready
	wire    [2:0] cmd_demux_src1_channel;                                        // cmd_demux:src1_channel -> mux_pipeline_002:in_channel
	wire          cmd_demux_src1_startofpacket;                                  // cmd_demux:src1_startofpacket -> mux_pipeline_002:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                    // cmd_demux:src1_endofpacket -> mux_pipeline_002:in_endofpacket
	wire          mux_pipeline_002_source0_valid;                                // mux_pipeline_002:out_valid -> cmd_mux_002:sink0_valid
	wire  [125:0] mux_pipeline_002_source0_data;                                 // mux_pipeline_002:out_data -> cmd_mux_002:sink0_data
	wire          mux_pipeline_002_source0_ready;                                // cmd_mux_002:sink0_ready -> mux_pipeline_002:out_ready
	wire    [2:0] mux_pipeline_002_source0_channel;                              // mux_pipeline_002:out_channel -> cmd_mux_002:sink0_channel
	wire          mux_pipeline_002_source0_startofpacket;                        // mux_pipeline_002:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          mux_pipeline_002_source0_endofpacket;                          // mux_pipeline_002:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                      // cmd_demux_001:src1_valid -> mux_pipeline_003:in_valid
	wire  [125:0] cmd_demux_001_src1_data;                                       // cmd_demux_001:src1_data -> mux_pipeline_003:in_data
	wire          cmd_demux_001_src1_ready;                                      // mux_pipeline_003:in_ready -> cmd_demux_001:src1_ready
	wire    [2:0] cmd_demux_001_src1_channel;                                    // cmd_demux_001:src1_channel -> mux_pipeline_003:in_channel
	wire          cmd_demux_001_src1_startofpacket;                              // cmd_demux_001:src1_startofpacket -> mux_pipeline_003:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                // cmd_demux_001:src1_endofpacket -> mux_pipeline_003:in_endofpacket
	wire          mux_pipeline_003_source0_valid;                                // mux_pipeline_003:out_valid -> cmd_mux_002:sink1_valid
	wire  [125:0] mux_pipeline_003_source0_data;                                 // mux_pipeline_003:out_data -> cmd_mux_002:sink1_data
	wire          mux_pipeline_003_source0_ready;                                // cmd_mux_002:sink1_ready -> mux_pipeline_003:out_ready
	wire    [2:0] mux_pipeline_003_source0_channel;                              // mux_pipeline_003:out_channel -> cmd_mux_002:sink1_channel
	wire          mux_pipeline_003_source0_startofpacket;                        // mux_pipeline_003:out_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          mux_pipeline_003_source0_endofpacket;                          // mux_pipeline_003:out_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                          // rsp_demux:src0_valid -> mux_pipeline_004:in_valid
	wire  [125:0] rsp_demux_src0_data;                                           // rsp_demux:src0_data -> mux_pipeline_004:in_data
	wire          rsp_demux_src0_ready;                                          // mux_pipeline_004:in_ready -> rsp_demux:src0_ready
	wire    [2:0] rsp_demux_src0_channel;                                        // rsp_demux:src0_channel -> mux_pipeline_004:in_channel
	wire          rsp_demux_src0_startofpacket;                                  // rsp_demux:src0_startofpacket -> mux_pipeline_004:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                    // rsp_demux:src0_endofpacket -> mux_pipeline_004:in_endofpacket
	wire          mux_pipeline_004_source0_valid;                                // mux_pipeline_004:out_valid -> rsp_mux:sink0_valid
	wire  [125:0] mux_pipeline_004_source0_data;                                 // mux_pipeline_004:out_data -> rsp_mux:sink0_data
	wire          mux_pipeline_004_source0_ready;                                // rsp_mux:sink0_ready -> mux_pipeline_004:out_ready
	wire    [2:0] mux_pipeline_004_source0_channel;                              // mux_pipeline_004:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_004_source0_startofpacket;                        // mux_pipeline_004:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mux_pipeline_004_source0_endofpacket;                          // mux_pipeline_004:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                      // rsp_demux_002:src0_valid -> mux_pipeline_005:in_valid
	wire  [125:0] rsp_demux_002_src0_data;                                       // rsp_demux_002:src0_data -> mux_pipeline_005:in_data
	wire          rsp_demux_002_src0_ready;                                      // mux_pipeline_005:in_ready -> rsp_demux_002:src0_ready
	wire    [2:0] rsp_demux_002_src0_channel;                                    // rsp_demux_002:src0_channel -> mux_pipeline_005:in_channel
	wire          rsp_demux_002_src0_startofpacket;                              // rsp_demux_002:src0_startofpacket -> mux_pipeline_005:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                // rsp_demux_002:src0_endofpacket -> mux_pipeline_005:in_endofpacket
	wire          mux_pipeline_005_source0_valid;                                // mux_pipeline_005:out_valid -> rsp_mux:sink1_valid
	wire  [125:0] mux_pipeline_005_source0_data;                                 // mux_pipeline_005:out_data -> rsp_mux:sink1_data
	wire          mux_pipeline_005_source0_ready;                                // rsp_mux:sink1_ready -> mux_pipeline_005:out_ready
	wire    [2:0] mux_pipeline_005_source0_channel;                              // mux_pipeline_005:out_channel -> rsp_mux:sink1_channel
	wire          mux_pipeline_005_source0_startofpacket;                        // mux_pipeline_005:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          mux_pipeline_005_source0_endofpacket;                          // mux_pipeline_005:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src0_valid;                                      // rsp_demux_001:src0_valid -> mux_pipeline_006:in_valid
	wire  [125:0] rsp_demux_001_src0_data;                                       // rsp_demux_001:src0_data -> mux_pipeline_006:in_data
	wire          rsp_demux_001_src0_ready;                                      // mux_pipeline_006:in_ready -> rsp_demux_001:src0_ready
	wire    [2:0] rsp_demux_001_src0_channel;                                    // rsp_demux_001:src0_channel -> mux_pipeline_006:in_channel
	wire          rsp_demux_001_src0_startofpacket;                              // rsp_demux_001:src0_startofpacket -> mux_pipeline_006:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                // rsp_demux_001:src0_endofpacket -> mux_pipeline_006:in_endofpacket
	wire          mux_pipeline_006_source0_valid;                                // mux_pipeline_006:out_valid -> rsp_mux_001:sink0_valid
	wire  [125:0] mux_pipeline_006_source0_data;                                 // mux_pipeline_006:out_data -> rsp_mux_001:sink0_data
	wire          mux_pipeline_006_source0_ready;                                // rsp_mux_001:sink0_ready -> mux_pipeline_006:out_ready
	wire    [2:0] mux_pipeline_006_source0_channel;                              // mux_pipeline_006:out_channel -> rsp_mux_001:sink0_channel
	wire          mux_pipeline_006_source0_startofpacket;                        // mux_pipeline_006:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          mux_pipeline_006_source0_endofpacket;                          // mux_pipeline_006:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_002_src1_valid;                                      // rsp_demux_002:src1_valid -> mux_pipeline_007:in_valid
	wire  [125:0] rsp_demux_002_src1_data;                                       // rsp_demux_002:src1_data -> mux_pipeline_007:in_data
	wire          rsp_demux_002_src1_ready;                                      // mux_pipeline_007:in_ready -> rsp_demux_002:src1_ready
	wire    [2:0] rsp_demux_002_src1_channel;                                    // rsp_demux_002:src1_channel -> mux_pipeline_007:in_channel
	wire          rsp_demux_002_src1_startofpacket;                              // rsp_demux_002:src1_startofpacket -> mux_pipeline_007:in_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                // rsp_demux_002:src1_endofpacket -> mux_pipeline_007:in_endofpacket
	wire          mux_pipeline_007_source0_valid;                                // mux_pipeline_007:out_valid -> rsp_mux_001:sink1_valid
	wire  [125:0] mux_pipeline_007_source0_data;                                 // mux_pipeline_007:out_data -> rsp_mux_001:sink1_data
	wire          mux_pipeline_007_source0_ready;                                // rsp_mux_001:sink1_ready -> mux_pipeline_007:out_ready
	wire    [2:0] mux_pipeline_007_source0_channel;                              // mux_pipeline_007:out_channel -> rsp_mux_001:sink1_channel
	wire          mux_pipeline_007_source0_startofpacket;                        // mux_pipeline_007:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          mux_pipeline_007_source0_endofpacket;                          // mux_pipeline_007:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          arria10_hps_0_h2f_axi_master_agent_read_cp_valid;              // arria10_hps_0_h2f_axi_master_agent:read_cp_valid -> pipeline_stage:in_valid
	wire  [125:0] arria10_hps_0_h2f_axi_master_agent_read_cp_data;               // arria10_hps_0_h2f_axi_master_agent:read_cp_data -> pipeline_stage:in_data
	wire          arria10_hps_0_h2f_axi_master_agent_read_cp_ready;              // pipeline_stage:in_ready -> arria10_hps_0_h2f_axi_master_agent:read_cp_ready
	wire          arria10_hps_0_h2f_axi_master_agent_read_cp_startofpacket;      // arria10_hps_0_h2f_axi_master_agent:read_cp_startofpacket -> pipeline_stage:in_startofpacket
	wire          arria10_hps_0_h2f_axi_master_agent_read_cp_endofpacket;        // arria10_hps_0_h2f_axi_master_agent:read_cp_endofpacket -> pipeline_stage:in_endofpacket
	wire          pipeline_stage_source0_valid;                                  // pipeline_stage:out_valid -> router_001:sink_valid
	wire  [125:0] pipeline_stage_source0_data;                                   // pipeline_stage:out_data -> router_001:sink_data
	wire          pipeline_stage_source0_ready;                                  // router_001:sink_ready -> pipeline_stage:out_ready
	wire          pipeline_stage_source0_startofpacket;                          // pipeline_stage:out_startofpacket -> router_001:sink_startofpacket
	wire          pipeline_stage_source0_endofpacket;                            // pipeline_stage:out_endofpacket -> router_001:sink_endofpacket
	wire          arria10_hps_0_h2f_axi_master_agent_write_cp_valid;             // arria10_hps_0_h2f_axi_master_agent:write_cp_valid -> pipeline_stage_001:in_valid
	wire  [125:0] arria10_hps_0_h2f_axi_master_agent_write_cp_data;              // arria10_hps_0_h2f_axi_master_agent:write_cp_data -> pipeline_stage_001:in_data
	wire          arria10_hps_0_h2f_axi_master_agent_write_cp_ready;             // pipeline_stage_001:in_ready -> arria10_hps_0_h2f_axi_master_agent:write_cp_ready
	wire          arria10_hps_0_h2f_axi_master_agent_write_cp_startofpacket;     // arria10_hps_0_h2f_axi_master_agent:write_cp_startofpacket -> pipeline_stage_001:in_startofpacket
	wire          arria10_hps_0_h2f_axi_master_agent_write_cp_endofpacket;       // arria10_hps_0_h2f_axi_master_agent:write_cp_endofpacket -> pipeline_stage_001:in_endofpacket
	wire          pipeline_stage_001_source0_valid;                              // pipeline_stage_001:out_valid -> router:sink_valid
	wire  [125:0] pipeline_stage_001_source0_data;                               // pipeline_stage_001:out_data -> router:sink_data
	wire          pipeline_stage_001_source0_ready;                              // router:sink_ready -> pipeline_stage_001:out_ready
	wire          pipeline_stage_001_source0_startofpacket;                      // pipeline_stage_001:out_startofpacket -> router:sink_startofpacket
	wire          pipeline_stage_001_source0_endofpacket;                        // pipeline_stage_001:out_endofpacket -> router:sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rdata_fifo_out_valid;                // onchip_memory2_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire    [9:0] onchip_memory2_0_s1_agent_rdata_fifo_out_data;                 // onchip_memory2_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_out_ready;                // avalon_st_adapter:in_0_ready -> onchip_memory2_0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                 // avalon_st_adapter:out_0_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	wire    [9:0] avalon_st_adapter_out_0_data;                                  // avalon_st_adapter:out_0_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                 // onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                 // avalon_st_adapter:out_0_error -> onchip_memory2_0_s1_agent:rdata_fifo_sink_error

	altera_merlin_axi_translator #(
		.USE_S0_AWID                       (1),
		.USE_S0_AWREGION                   (1),
		.USE_M0_AWREGION                   (0),
		.USE_S0_AWLEN                      (1),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (1),
		.USE_S0_AWLOCK                     (1),
		.USE_M0_AWLOCK                     (0),
		.USE_S0_AWCACHE                    (1),
		.USE_M0_AWCACHE                    (0),
		.USE_M0_AWPROT                     (0),
		.USE_S0_AWQOS                      (1),
		.USE_M0_AWQOS                      (0),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (0),
		.USE_S0_BID                        (1),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (0),
		.USE_S0_ARID                       (1),
		.USE_S0_ARREGION                   (1),
		.USE_M0_ARREGION                   (0),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (1),
		.USE_S0_ARLOCK                     (1),
		.USE_M0_ARLOCK                     (0),
		.USE_M0_ARCACHE                    (0),
		.USE_M0_ARQOS                      (0),
		.USE_M0_ARPROT                     (0),
		.USE_S0_ARCACHE                    (1),
		.USE_S0_ARQOS                      (1),
		.USE_S0_RID                        (1),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (0),
		.USE_S0_RLAST                      (1),
		.M0_ID_WIDTH                       (4),
		.DATA_WIDTH                        (32),
		.S0_ID_WIDTH                       (4),
		.M0_ADDR_WIDTH                     (16),
		.S0_WRITE_ADDR_USER_WIDTH          (5),
		.S0_READ_ADDR_USER_WIDTH           (5),
		.M0_WRITE_ADDR_USER_WIDTH          (1),
		.M0_READ_ADDR_USER_WIDTH           (1),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (1),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (1),
		.S0_ADDR_WIDTH                     (16),
		.USE_S0_AWUSER                     (1),
		.USE_S0_ARUSER                     (1),
		.USE_S0_WUSER                      (1),
		.USE_S0_RUSER                      (1),
		.USE_S0_BUSER                      (1),
		.USE_M0_AWUSER                     (0),
		.USE_M0_ARUSER                     (0),
		.USE_M0_WUSER                      (0),
		.USE_M0_RUSER                      (0),
		.USE_M0_BUSER                      (0),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4")
	) protobuf_serializer_0_s0_translator (
		.aclk        (clk_0_clk_clk),                                             //       clk.clk
		.aresetn     (~arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset),  // clk_reset.reset_n
		.m0_awid     (protobuf_serializer_0_s0_awid),                             //        m0.awid
		.m0_awaddr   (protobuf_serializer_0_s0_awaddr),                           //          .awaddr
		.m0_awlen    (protobuf_serializer_0_s0_awlen),                            //          .awlen
		.m0_awsize   (protobuf_serializer_0_s0_awsize),                           //          .awsize
		.m0_awburst  (protobuf_serializer_0_s0_awburst),                          //          .awburst
		.m0_awvalid  (protobuf_serializer_0_s0_awvalid),                          //          .awvalid
		.m0_awready  (protobuf_serializer_0_s0_awready),                          //          .awready
		.m0_wdata    (protobuf_serializer_0_s0_wdata),                            //          .wdata
		.m0_wstrb    (protobuf_serializer_0_s0_wstrb),                            //          .wstrb
		.m0_wvalid   (protobuf_serializer_0_s0_wvalid),                           //          .wvalid
		.m0_wready   (protobuf_serializer_0_s0_wready),                           //          .wready
		.m0_bid      (protobuf_serializer_0_s0_bid),                              //          .bid
		.m0_bvalid   (protobuf_serializer_0_s0_bvalid),                           //          .bvalid
		.m0_bready   (protobuf_serializer_0_s0_bready),                           //          .bready
		.m0_arid     (protobuf_serializer_0_s0_arid),                             //          .arid
		.m0_araddr   (protobuf_serializer_0_s0_araddr),                           //          .araddr
		.m0_arlen    (protobuf_serializer_0_s0_arlen),                            //          .arlen
		.m0_arsize   (protobuf_serializer_0_s0_arsize),                           //          .arsize
		.m0_arburst  (protobuf_serializer_0_s0_arburst),                          //          .arburst
		.m0_arvalid  (protobuf_serializer_0_s0_arvalid),                          //          .arvalid
		.m0_arready  (protobuf_serializer_0_s0_arready),                          //          .arready
		.m0_rid      (protobuf_serializer_0_s0_rid),                              //          .rid
		.m0_rdata    (protobuf_serializer_0_s0_rdata),                            //          .rdata
		.m0_rlast    (protobuf_serializer_0_s0_rlast),                            //          .rlast
		.m0_rvalid   (protobuf_serializer_0_s0_rvalid),                           //          .rvalid
		.m0_rready   (protobuf_serializer_0_s0_rready),                           //          .rready
		.s0_awid     (protobuf_serializer_0_s0_agent_altera_axi_master_awid),     //        s0.awid
		.s0_awaddr   (protobuf_serializer_0_s0_agent_altera_axi_master_awaddr),   //          .awaddr
		.s0_awlen    (protobuf_serializer_0_s0_agent_altera_axi_master_awlen),    //          .awlen
		.s0_awsize   (protobuf_serializer_0_s0_agent_altera_axi_master_awsize),   //          .awsize
		.s0_awburst  (protobuf_serializer_0_s0_agent_altera_axi_master_awburst),  //          .awburst
		.s0_awlock   (protobuf_serializer_0_s0_agent_altera_axi_master_awlock),   //          .awlock
		.s0_awcache  (protobuf_serializer_0_s0_agent_altera_axi_master_awcache),  //          .awcache
		.s0_awprot   (protobuf_serializer_0_s0_agent_altera_axi_master_awprot),   //          .awprot
		.s0_awuser   (protobuf_serializer_0_s0_agent_altera_axi_master_awuser),   //          .awuser
		.s0_awqos    (protobuf_serializer_0_s0_agent_altera_axi_master_awqos),    //          .awqos
		.s0_awregion (protobuf_serializer_0_s0_agent_altera_axi_master_awregion), //          .awregion
		.s0_awvalid  (protobuf_serializer_0_s0_agent_altera_axi_master_awvalid),  //          .awvalid
		.s0_awready  (protobuf_serializer_0_s0_agent_altera_axi_master_awready),  //          .awready
		.s0_wdata    (protobuf_serializer_0_s0_agent_altera_axi_master_wdata),    //          .wdata
		.s0_wstrb    (protobuf_serializer_0_s0_agent_altera_axi_master_wstrb),    //          .wstrb
		.s0_wlast    (protobuf_serializer_0_s0_agent_altera_axi_master_wlast),    //          .wlast
		.s0_wvalid   (protobuf_serializer_0_s0_agent_altera_axi_master_wvalid),   //          .wvalid
		.s0_wuser    (protobuf_serializer_0_s0_agent_altera_axi_master_wuser),    //          .wuser
		.s0_wready   (protobuf_serializer_0_s0_agent_altera_axi_master_wready),   //          .wready
		.s0_bid      (protobuf_serializer_0_s0_agent_altera_axi_master_bid),      //          .bid
		.s0_bresp    (protobuf_serializer_0_s0_agent_altera_axi_master_bresp),    //          .bresp
		.s0_buser    (protobuf_serializer_0_s0_agent_altera_axi_master_buser),    //          .buser
		.s0_bvalid   (protobuf_serializer_0_s0_agent_altera_axi_master_bvalid),   //          .bvalid
		.s0_bready   (protobuf_serializer_0_s0_agent_altera_axi_master_bready),   //          .bready
		.s0_arid     (protobuf_serializer_0_s0_agent_altera_axi_master_arid),     //          .arid
		.s0_araddr   (protobuf_serializer_0_s0_agent_altera_axi_master_araddr),   //          .araddr
		.s0_arlen    (protobuf_serializer_0_s0_agent_altera_axi_master_arlen),    //          .arlen
		.s0_arsize   (protobuf_serializer_0_s0_agent_altera_axi_master_arsize),   //          .arsize
		.s0_arburst  (protobuf_serializer_0_s0_agent_altera_axi_master_arburst),  //          .arburst
		.s0_arlock   (protobuf_serializer_0_s0_agent_altera_axi_master_arlock),   //          .arlock
		.s0_arcache  (protobuf_serializer_0_s0_agent_altera_axi_master_arcache),  //          .arcache
		.s0_arprot   (protobuf_serializer_0_s0_agent_altera_axi_master_arprot),   //          .arprot
		.s0_aruser   (protobuf_serializer_0_s0_agent_altera_axi_master_aruser),   //          .aruser
		.s0_arqos    (protobuf_serializer_0_s0_agent_altera_axi_master_arqos),    //          .arqos
		.s0_arregion (protobuf_serializer_0_s0_agent_altera_axi_master_arregion), //          .arregion
		.s0_arvalid  (protobuf_serializer_0_s0_agent_altera_axi_master_arvalid),  //          .arvalid
		.s0_arready  (protobuf_serializer_0_s0_agent_altera_axi_master_arready),  //          .arready
		.s0_rid      (protobuf_serializer_0_s0_agent_altera_axi_master_rid),      //          .rid
		.s0_rdata    (protobuf_serializer_0_s0_agent_altera_axi_master_rdata),    //          .rdata
		.s0_rresp    (protobuf_serializer_0_s0_agent_altera_axi_master_rresp),    //          .rresp
		.s0_rlast    (protobuf_serializer_0_s0_agent_altera_axi_master_rlast),    //          .rlast
		.s0_rvalid   (protobuf_serializer_0_s0_agent_altera_axi_master_rvalid),   //          .rvalid
		.s0_rready   (protobuf_serializer_0_s0_agent_altera_axi_master_rready),   //          .rready
		.s0_ruser    (protobuf_serializer_0_s0_agent_altera_axi_master_ruser),    //          .ruser
		.m0_awlock   (),                                                          // (terminated)
		.m0_awcache  (),                                                          // (terminated)
		.m0_awprot   (),                                                          // (terminated)
		.m0_awuser   (),                                                          // (terminated)
		.m0_awqos    (),                                                          // (terminated)
		.m0_awregion (),                                                          // (terminated)
		.m0_wlast    (),                                                          // (terminated)
		.m0_wuser    (),                                                          // (terminated)
		.m0_bresp    (2'b00),                                                     // (terminated)
		.m0_buser    (1'b0),                                                      // (terminated)
		.m0_arlock   (),                                                          // (terminated)
		.m0_arcache  (),                                                          // (terminated)
		.m0_arprot   (),                                                          // (terminated)
		.m0_aruser   (),                                                          // (terminated)
		.m0_arqos    (),                                                          // (terminated)
		.m0_arregion (),                                                          // (terminated)
		.m0_rresp    (2'b00),                                                     // (terminated)
		.m0_ruser    (1'b0),                                                      // (terminated)
		.s0_wid      (4'b0000),                                                   // (terminated)
		.m0_wid      ()                                                           // (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (18),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s1_translator (
		.clk                    (clk_0_clk_clk),                                           //                      clk.clk
		.reset                  (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory2_0_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_0_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (onchip_memory2_0_s1_agent_m0_read),                       //                         .read
		.uav_write              (onchip_memory2_0_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (onchip_memory2_0_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_0_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (onchip_memory2_0_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (onchip_memory2_0_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (onchip_memory2_0_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (onchip_memory2_0_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (onchip_memory2_0_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (onchip_memory2_0_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_0_s1_write),                               //                         .write
		.av_readdata            (onchip_memory2_0_s1_readdata),                            //                         .readdata
		.av_writedata           (onchip_memory2_0_s1_writedata),                           //                         .writedata
		.av_chipselect          (onchip_memory2_0_s1_chipselect),                          //                         .chipselect
		.av_clken               (onchip_memory2_0_s1_clken),                               //                         .clken
		.av_read                (),                                                        //              (terminated)
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (4),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (5),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (103),
		.PKT_CACHE_H               (120),
		.PKT_CACHE_L               (117),
		.PKT_ADDR_SIDEBAND_H       (101),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_PROTECTION_H          (116),
		.PKT_PROTECTION_L          (114),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_RESPONSE_STATUS_L     (121),
		.PKT_RESPONSE_STATUS_H     (122),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (108),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (109),
		.PKT_THREAD_ID_H           (113),
		.PKT_THREAD_ID_L           (110),
		.PKT_QOS_L                 (104),
		.PKT_QOS_H                 (107),
		.PKT_ORI_BURST_SIZE_L      (123),
		.PKT_ORI_BURST_SIZE_H      (125),
		.PKT_DATA_SIDEBAND_H       (102),
		.PKT_DATA_SIDEBAND_L       (102),
		.ST_DATA_W                 (126),
		.ST_CHANNEL_W              (3),
		.ID                        (0)
	) arria10_hps_0_h2f_axi_master_agent (
		.aclk                   (clk_0_clk_clk),                                                 //              clk.clk
		.aresetn                (~arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset),      //        clk_reset.reset_n
		.write_cp_valid         (arria10_hps_0_h2f_axi_master_agent_write_cp_valid),             //         write_cp.valid
		.write_cp_data          (arria10_hps_0_h2f_axi_master_agent_write_cp_data),              //                 .data
		.write_cp_startofpacket (arria10_hps_0_h2f_axi_master_agent_write_cp_startofpacket),     //                 .startofpacket
		.write_cp_endofpacket   (arria10_hps_0_h2f_axi_master_agent_write_cp_endofpacket),       //                 .endofpacket
		.write_cp_ready         (arria10_hps_0_h2f_axi_master_agent_write_cp_ready),             //                 .ready
		.write_rp_valid         (arria10_hps_0_h2f_axi_master_wr_limiter_rsp_src_valid),         //         write_rp.valid
		.write_rp_data          (arria10_hps_0_h2f_axi_master_wr_limiter_rsp_src_data),          //                 .data
		.write_rp_channel       (arria10_hps_0_h2f_axi_master_wr_limiter_rsp_src_channel),       //                 .channel
		.write_rp_startofpacket (arria10_hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket), //                 .startofpacket
		.write_rp_endofpacket   (arria10_hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket),   //                 .endofpacket
		.write_rp_ready         (arria10_hps_0_h2f_axi_master_wr_limiter_rsp_src_ready),         //                 .ready
		.read_cp_valid          (arria10_hps_0_h2f_axi_master_agent_read_cp_valid),              //          read_cp.valid
		.read_cp_data           (arria10_hps_0_h2f_axi_master_agent_read_cp_data),               //                 .data
		.read_cp_startofpacket  (arria10_hps_0_h2f_axi_master_agent_read_cp_startofpacket),      //                 .startofpacket
		.read_cp_endofpacket    (arria10_hps_0_h2f_axi_master_agent_read_cp_endofpacket),        //                 .endofpacket
		.read_cp_ready          (arria10_hps_0_h2f_axi_master_agent_read_cp_ready),              //                 .ready
		.read_rp_valid          (arria10_hps_0_h2f_axi_master_rd_limiter_rsp_src_valid),         //          read_rp.valid
		.read_rp_data           (arria10_hps_0_h2f_axi_master_rd_limiter_rsp_src_data),          //                 .data
		.read_rp_channel        (arria10_hps_0_h2f_axi_master_rd_limiter_rsp_src_channel),       //                 .channel
		.read_rp_startofpacket  (arria10_hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket), //                 .startofpacket
		.read_rp_endofpacket    (arria10_hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket),   //                 .endofpacket
		.read_rp_ready          (arria10_hps_0_h2f_axi_master_rd_limiter_rsp_src_ready),         //                 .ready
		.awid                   (arria10_hps_0_h2f_axi_master_awid),                             // altera_axi_slave.awid
		.awaddr                 (arria10_hps_0_h2f_axi_master_awaddr),                           //                 .awaddr
		.awlen                  (arria10_hps_0_h2f_axi_master_awlen),                            //                 .awlen
		.awsize                 (arria10_hps_0_h2f_axi_master_awsize),                           //                 .awsize
		.awburst                (arria10_hps_0_h2f_axi_master_awburst),                          //                 .awburst
		.awlock                 (arria10_hps_0_h2f_axi_master_awlock),                           //                 .awlock
		.awcache                (arria10_hps_0_h2f_axi_master_awcache),                          //                 .awcache
		.awprot                 (arria10_hps_0_h2f_axi_master_awprot),                           //                 .awprot
		.awuser                 (arria10_hps_0_h2f_axi_master_awuser),                           //                 .awuser
		.awvalid                (arria10_hps_0_h2f_axi_master_awvalid),                          //                 .awvalid
		.awready                (arria10_hps_0_h2f_axi_master_awready),                          //                 .awready
		.wid                    (arria10_hps_0_h2f_axi_master_wid),                              //                 .wid
		.wdata                  (arria10_hps_0_h2f_axi_master_wdata),                            //                 .wdata
		.wstrb                  (arria10_hps_0_h2f_axi_master_wstrb),                            //                 .wstrb
		.wlast                  (arria10_hps_0_h2f_axi_master_wlast),                            //                 .wlast
		.wvalid                 (arria10_hps_0_h2f_axi_master_wvalid),                           //                 .wvalid
		.wready                 (arria10_hps_0_h2f_axi_master_wready),                           //                 .wready
		.bid                    (arria10_hps_0_h2f_axi_master_bid),                              //                 .bid
		.bresp                  (arria10_hps_0_h2f_axi_master_bresp),                            //                 .bresp
		.bvalid                 (arria10_hps_0_h2f_axi_master_bvalid),                           //                 .bvalid
		.bready                 (arria10_hps_0_h2f_axi_master_bready),                           //                 .bready
		.arid                   (arria10_hps_0_h2f_axi_master_arid),                             //                 .arid
		.araddr                 (arria10_hps_0_h2f_axi_master_araddr),                           //                 .araddr
		.arlen                  (arria10_hps_0_h2f_axi_master_arlen),                            //                 .arlen
		.arsize                 (arria10_hps_0_h2f_axi_master_arsize),                           //                 .arsize
		.arburst                (arria10_hps_0_h2f_axi_master_arburst),                          //                 .arburst
		.arlock                 (arria10_hps_0_h2f_axi_master_arlock),                           //                 .arlock
		.arcache                (arria10_hps_0_h2f_axi_master_arcache),                          //                 .arcache
		.arprot                 (arria10_hps_0_h2f_axi_master_arprot),                           //                 .arprot
		.aruser                 (arria10_hps_0_h2f_axi_master_aruser),                           //                 .aruser
		.arvalid                (arria10_hps_0_h2f_axi_master_arvalid),                          //                 .arvalid
		.arready                (arria10_hps_0_h2f_axi_master_arready),                          //                 .arready
		.rid                    (arria10_hps_0_h2f_axi_master_rid),                              //                 .rid
		.rdata                  (arria10_hps_0_h2f_axi_master_rdata),                            //                 .rdata
		.rresp                  (arria10_hps_0_h2f_axi_master_rresp),                            //                 .rresp
		.rlast                  (arria10_hps_0_h2f_axi_master_rlast),                            //                 .rlast
		.rvalid                 (arria10_hps_0_h2f_axi_master_rvalid),                           //                 .rvalid
		.rready                 (arria10_hps_0_h2f_axi_master_rready),                           //                 .rready
		.awqos                  (4'b0000),                                                       //      (terminated)
		.arqos                  (4'b0000),                                                       //      (terminated)
		.awregion               (4'b0000),                                                       //      (terminated)
		.arregion               (4'b0000),                                                       //      (terminated)
		.wuser                  (1'b0),                                                          //      (terminated)
		.ruser                  (),                                                              //      (terminated)
		.buser                  ()                                                               //      (terminated)
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (107),
		.PKT_QOS_L                   (104),
		.PKT_THREAD_ID_H             (113),
		.PKT_THREAD_ID_L             (110),
		.PKT_RESPONSE_STATUS_H       (122),
		.PKT_RESPONSE_STATUS_L       (121),
		.PKT_BEGIN_BURST             (103),
		.PKT_CACHE_H                 (120),
		.PKT_CACHE_L                 (117),
		.PKT_DATA_SIDEBAND_H         (102),
		.PKT_DATA_SIDEBAND_L         (102),
		.PKT_ADDR_SIDEBAND_H         (101),
		.PKT_ADDR_SIDEBAND_L         (97),
		.PKT_BURST_TYPE_H            (96),
		.PKT_BURST_TYPE_L            (95),
		.PKT_PROTECTION_H            (116),
		.PKT_PROTECTION_L            (114),
		.PKT_BURST_SIZE_H            (94),
		.PKT_BURST_SIZE_L            (92),
		.PKT_BURSTWRAP_H             (91),
		.PKT_BURSTWRAP_L             (85),
		.PKT_BYTE_CNT_H              (84),
		.PKT_BYTE_CNT_L              (74),
		.PKT_ADDR_H                  (67),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (73),
		.PKT_TRANS_LOCK              (72),
		.PKT_TRANS_COMPRESSED_READ   (68),
		.PKT_TRANS_POSTED            (69),
		.PKT_TRANS_WRITE             (70),
		.PKT_TRANS_READ              (71),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (108),
		.PKT_SRC_ID_L                (108),
		.PKT_DEST_ID_H               (109),
		.PKT_DEST_ID_L               (109),
		.PKT_ORI_BURST_SIZE_L        (123),
		.PKT_ORI_BURST_SIZE_H        (125),
		.ADDR_USER_WIDTH             (5),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (126),
		.ADDR_WIDTH                  (16),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (3),
		.AXI_SLAVE_ID_W              (4),
		.PASS_ID_TO_SLAVE            (1),
		.AXI_VERSION                 ("AXI4"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1)
	) protobuf_serializer_0_s0_agent (
		.aclk                   (clk_0_clk_clk),                                             //        clock_sink.clk
		.aresetn                (~arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset),  //        reset_sink.reset_n
		.read_cp_valid          (agent_pipeline_001_source0_valid),                          //           read_cp.valid
		.read_cp_ready          (agent_pipeline_001_source0_ready),                          //                  .ready
		.read_cp_data           (agent_pipeline_001_source0_data),                           //                  .data
		.read_cp_channel        (agent_pipeline_001_source0_channel),                        //                  .channel
		.read_cp_startofpacket  (agent_pipeline_001_source0_startofpacket),                  //                  .startofpacket
		.read_cp_endofpacket    (agent_pipeline_001_source0_endofpacket),                    //                  .endofpacket
		.write_cp_ready         (agent_pipeline_source0_ready),                              //          write_cp.ready
		.write_cp_valid         (agent_pipeline_source0_valid),                              //                  .valid
		.write_cp_data          (agent_pipeline_source0_data),                               //                  .data
		.write_cp_channel       (agent_pipeline_source0_channel),                            //                  .channel
		.write_cp_startofpacket (agent_pipeline_source0_startofpacket),                      //                  .startofpacket
		.write_cp_endofpacket   (agent_pipeline_source0_endofpacket),                        //                  .endofpacket
		.read_rp_ready          (protobuf_serializer_0_s0_agent_read_rp_ready),              //           read_rp.ready
		.read_rp_valid          (protobuf_serializer_0_s0_agent_read_rp_valid),              //                  .valid
		.read_rp_data           (protobuf_serializer_0_s0_agent_read_rp_data),               //                  .data
		.read_rp_startofpacket  (protobuf_serializer_0_s0_agent_read_rp_startofpacket),      //                  .startofpacket
		.read_rp_endofpacket    (protobuf_serializer_0_s0_agent_read_rp_endofpacket),        //                  .endofpacket
		.write_rp_ready         (protobuf_serializer_0_s0_agent_write_rp_ready),             //          write_rp.ready
		.write_rp_valid         (protobuf_serializer_0_s0_agent_write_rp_valid),             //                  .valid
		.write_rp_data          (protobuf_serializer_0_s0_agent_write_rp_data),              //                  .data
		.write_rp_startofpacket (protobuf_serializer_0_s0_agent_write_rp_startofpacket),     //                  .startofpacket
		.write_rp_endofpacket   (protobuf_serializer_0_s0_agent_write_rp_endofpacket),       //                  .endofpacket
		.awid                   (protobuf_serializer_0_s0_agent_altera_axi_master_awid),     // altera_axi_master.awid
		.awaddr                 (protobuf_serializer_0_s0_agent_altera_axi_master_awaddr),   //                  .awaddr
		.awlen                  (protobuf_serializer_0_s0_agent_altera_axi_master_awlen),    //                  .awlen
		.awsize                 (protobuf_serializer_0_s0_agent_altera_axi_master_awsize),   //                  .awsize
		.awburst                (protobuf_serializer_0_s0_agent_altera_axi_master_awburst),  //                  .awburst
		.awlock                 (protobuf_serializer_0_s0_agent_altera_axi_master_awlock),   //                  .awlock
		.awcache                (protobuf_serializer_0_s0_agent_altera_axi_master_awcache),  //                  .awcache
		.awprot                 (protobuf_serializer_0_s0_agent_altera_axi_master_awprot),   //                  .awprot
		.awuser                 (protobuf_serializer_0_s0_agent_altera_axi_master_awuser),   //                  .awuser
		.awvalid                (protobuf_serializer_0_s0_agent_altera_axi_master_awvalid),  //                  .awvalid
		.awready                (protobuf_serializer_0_s0_agent_altera_axi_master_awready),  //                  .awready
		.wdata                  (protobuf_serializer_0_s0_agent_altera_axi_master_wdata),    //                  .wdata
		.wstrb                  (protobuf_serializer_0_s0_agent_altera_axi_master_wstrb),    //                  .wstrb
		.wlast                  (protobuf_serializer_0_s0_agent_altera_axi_master_wlast),    //                  .wlast
		.wvalid                 (protobuf_serializer_0_s0_agent_altera_axi_master_wvalid),   //                  .wvalid
		.wready                 (protobuf_serializer_0_s0_agent_altera_axi_master_wready),   //                  .wready
		.bid                    (protobuf_serializer_0_s0_agent_altera_axi_master_bid),      //                  .bid
		.bresp                  (protobuf_serializer_0_s0_agent_altera_axi_master_bresp),    //                  .bresp
		.bvalid                 (protobuf_serializer_0_s0_agent_altera_axi_master_bvalid),   //                  .bvalid
		.bready                 (protobuf_serializer_0_s0_agent_altera_axi_master_bready),   //                  .bready
		.arid                   (protobuf_serializer_0_s0_agent_altera_axi_master_arid),     //                  .arid
		.araddr                 (protobuf_serializer_0_s0_agent_altera_axi_master_araddr),   //                  .araddr
		.arlen                  (protobuf_serializer_0_s0_agent_altera_axi_master_arlen),    //                  .arlen
		.arsize                 (protobuf_serializer_0_s0_agent_altera_axi_master_arsize),   //                  .arsize
		.arburst                (protobuf_serializer_0_s0_agent_altera_axi_master_arburst),  //                  .arburst
		.arlock                 (protobuf_serializer_0_s0_agent_altera_axi_master_arlock),   //                  .arlock
		.arcache                (protobuf_serializer_0_s0_agent_altera_axi_master_arcache),  //                  .arcache
		.arprot                 (protobuf_serializer_0_s0_agent_altera_axi_master_arprot),   //                  .arprot
		.aruser                 (protobuf_serializer_0_s0_agent_altera_axi_master_aruser),   //                  .aruser
		.arvalid                (protobuf_serializer_0_s0_agent_altera_axi_master_arvalid),  //                  .arvalid
		.arready                (protobuf_serializer_0_s0_agent_altera_axi_master_arready),  //                  .arready
		.rid                    (protobuf_serializer_0_s0_agent_altera_axi_master_rid),      //                  .rid
		.rdata                  (protobuf_serializer_0_s0_agent_altera_axi_master_rdata),    //                  .rdata
		.rresp                  (protobuf_serializer_0_s0_agent_altera_axi_master_rresp),    //                  .rresp
		.rlast                  (protobuf_serializer_0_s0_agent_altera_axi_master_rlast),    //                  .rlast
		.rvalid                 (protobuf_serializer_0_s0_agent_altera_axi_master_rvalid),   //                  .rvalid
		.rready                 (protobuf_serializer_0_s0_agent_altera_axi_master_rready),   //                  .rready
		.wuser                  (protobuf_serializer_0_s0_agent_altera_axi_master_wuser),    //                  .wuser
		.awqos                  (protobuf_serializer_0_s0_agent_altera_axi_master_awqos),    //                  .awqos
		.awregion               (protobuf_serializer_0_s0_agent_altera_axi_master_awregion), //                  .awregion
		.ruser                  (protobuf_serializer_0_s0_agent_altera_axi_master_ruser),    //                  .ruser
		.buser                  (protobuf_serializer_0_s0_agent_altera_axi_master_buser),    //                  .buser
		.arqos                  (protobuf_serializer_0_s0_agent_altera_axi_master_arqos),    //                  .arqos
		.arregion               (protobuf_serializer_0_s0_agent_altera_axi_master_arregion)  //                  .arregion
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (58),
		.PKT_BYTE_CNT_H            (57),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                           //             clk.clk
		.reset                   (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (onchip_memory2_0_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (onchip_memory2_0_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (onchip_memory2_0_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (onchip_memory2_0_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (onchip_memory2_0_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (onchip_memory2_0_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (agent_pipeline_004_source0_ready),                        //              cp.ready
		.cp_valid                (agent_pipeline_004_source0_valid),                        //                .valid
		.cp_data                 (agent_pipeline_004_source0_data),                         //                .data
		.cp_startofpacket        (agent_pipeline_004_source0_startofpacket),                //                .startofpacket
		.cp_endofpacket          (agent_pipeline_004_source0_endofpacket),                  //                .endofpacket
		.cp_channel              (agent_pipeline_004_source0_channel),                      //                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (onchip_memory2_0_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rf_source_data),                //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (onchip_memory2_0_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (onchip_memory2_0_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (10),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rdata_fifo_src_data),           //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),          //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),          //          .ready
		.out_data          (onchip_memory2_0_s1_agent_rdata_fifo_out_data),           //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rdata_fifo_out_valid),          //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rdata_fifo_out_ready),          //          .ready
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                    // (terminated)
		.out_startofpacket (),                                                        // (terminated)
		.out_endofpacket   (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	ghrd_10as066n2_altera_merlin_router_161_glc2kaq router (
		.sink_ready         (pipeline_stage_001_source0_ready),                        //      sink.ready
		.sink_valid         (pipeline_stage_001_source0_valid),                        //          .valid
		.sink_data          (pipeline_stage_001_source0_data),                         //          .data
		.sink_startofpacket (pipeline_stage_001_source0_startofpacket),                //          .startofpacket
		.sink_endofpacket   (pipeline_stage_001_source0_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                        //       src.ready
		.src_valid          (router_src_valid),                                        //          .valid
		.src_data           (router_src_data),                                         //          .data
		.src_channel        (router_src_channel),                                      //          .channel
		.src_startofpacket  (router_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                   //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_router_161_3z24bki router_001 (
		.sink_ready         (pipeline_stage_source0_ready),                            //      sink.ready
		.sink_valid         (pipeline_stage_source0_valid),                            //          .valid
		.sink_data          (pipeline_stage_source0_data),                             //          .data
		.sink_startofpacket (pipeline_stage_source0_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (pipeline_stage_source0_endofpacket),                      //          .endofpacket
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                    //       src.ready
		.src_valid          (router_001_src_valid),                                    //          .valid
		.src_data           (router_001_src_data),                                     //          .data
		.src_channel        (router_001_src_channel),                                  //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                               //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_router_161_6tlrwfy router_002 (
		.sink_ready         (agent_pipeline_002_source0_ready),                        //      sink.ready
		.sink_valid         (agent_pipeline_002_source0_valid),                        //          .valid
		.sink_data          (agent_pipeline_002_source0_data),                         //          .data
		.sink_startofpacket (agent_pipeline_002_source0_startofpacket),                //          .startofpacket
		.sink_endofpacket   (agent_pipeline_002_source0_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                    //       src.ready
		.src_valid          (router_002_src_valid),                                    //          .valid
		.src_data           (router_002_src_data),                                     //          .data
		.src_channel        (router_002_src_channel),                                  //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                               //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_router_161_eznt4gi router_003 (
		.sink_ready         (agent_pipeline_003_source0_ready),                        //      sink.ready
		.sink_valid         (agent_pipeline_003_source0_valid),                        //          .valid
		.sink_data          (agent_pipeline_003_source0_data),                         //          .data
		.sink_startofpacket (agent_pipeline_003_source0_startofpacket),                //          .startofpacket
		.sink_endofpacket   (agent_pipeline_003_source0_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                    //       src.ready
		.src_valid          (router_003_src_valid),                                    //          .valid
		.src_data           (router_003_src_data),                                     //          .data
		.src_channel        (router_003_src_channel),                                  //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                               //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_router_161_r2wmb7q router_004 (
		.sink_ready         (agent_pipeline_005_source0_ready),                        //      sink.ready
		.sink_valid         (agent_pipeline_005_source0_valid),                        //          .valid
		.sink_data          (agent_pipeline_005_source0_data),                         //          .data
		.sink_startofpacket (agent_pipeline_005_source0_startofpacket),                //          .startofpacket
		.sink_endofpacket   (agent_pipeline_005_source0_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                    //       src.ready
		.src_valid          (router_004_src_valid),                                    //          .valid
		.src_data           (router_004_src_data),                                     //          .data
		.src_channel        (router_004_src_channel),                                  //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                               //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (109),
		.PKT_SRC_ID_H              (108),
		.PKT_SRC_ID_L              (108),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (8),
		.PIPELINED                 (0),
		.ST_DATA_W                 (126),
		.ST_CHANNEL_W              (3),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arria10_hps_0_h2f_axi_master_wr_limiter (
		.clk                    (clk_0_clk_clk),                                                 //       clk.clk
		.reset                  (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                              //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                              //          .valid
		.cmd_sink_data          (router_src_data),                                               //          .data
		.cmd_sink_channel       (router_src_channel),                                            //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                      //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                        //          .endofpacket
		.cmd_src_ready          (arria10_hps_0_h2f_axi_master_wr_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (arria10_hps_0_h2f_axi_master_wr_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (arria10_hps_0_h2f_axi_master_wr_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (arria10_hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (arria10_hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (arria10_hps_0_h2f_axi_master_wr_limiter_cmd_src_valid),         //          .valid
		.rsp_sink_ready         (limiter_pipeline_001_source0_ready),                            //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_001_source0_valid),                            //          .valid
		.rsp_sink_channel       (limiter_pipeline_001_source0_channel),                          //          .channel
		.rsp_sink_data          (limiter_pipeline_001_source0_data),                             //          .data
		.rsp_sink_startofpacket (limiter_pipeline_001_source0_startofpacket),                    //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_001_source0_endofpacket),                      //          .endofpacket
		.rsp_src_ready          (arria10_hps_0_h2f_axi_master_wr_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (arria10_hps_0_h2f_axi_master_wr_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (arria10_hps_0_h2f_axi_master_wr_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (arria10_hps_0_h2f_axi_master_wr_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (arria10_hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (arria10_hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (109),
		.PKT_SRC_ID_H              (108),
		.PKT_SRC_ID_L              (108),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (8),
		.PIPELINED                 (0),
		.ST_DATA_W                 (126),
		.ST_CHANNEL_W              (3),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arria10_hps_0_h2f_axi_master_rd_limiter (
		.clk                    (clk_0_clk_clk),                                                 //       clk.clk
		.reset                  (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                          //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                          //          .valid
		.cmd_sink_data          (router_001_src_data),                                           //          .data
		.cmd_sink_channel       (router_001_src_channel),                                        //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                  //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                    //          .endofpacket
		.cmd_src_ready          (arria10_hps_0_h2f_axi_master_rd_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (arria10_hps_0_h2f_axi_master_rd_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (arria10_hps_0_h2f_axi_master_rd_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (arria10_hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (arria10_hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (arria10_hps_0_h2f_axi_master_rd_limiter_cmd_src_valid),         //          .valid
		.rsp_sink_ready         (limiter_pipeline_003_source0_ready),                            //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_003_source0_valid),                            //          .valid
		.rsp_sink_channel       (limiter_pipeline_003_source0_channel),                          //          .channel
		.rsp_sink_data          (limiter_pipeline_003_source0_data),                             //          .data
		.rsp_sink_startofpacket (limiter_pipeline_003_source0_startofpacket),                    //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_003_source0_endofpacket),                      //          .endofpacket
		.rsp_src_ready          (arria10_hps_0_h2f_axi_master_rd_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (arria10_hps_0_h2f_axi_master_rd_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (arria10_hps_0_h2f_axi_master_rd_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (arria10_hps_0_h2f_axi_master_rd_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (arria10_hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (arria10_hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (76),
		.PKT_BYTE_CNT_H            (57),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_BURST_TYPE_H          (69),
		.PKT_BURST_TYPE_L          (68),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (58),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (99),
		.ST_CHANNEL_W              (3),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (64),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) onchip_memory2_0_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                           //       cr0.clk
		.reset                 (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (onchip_memory2_0_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (onchip_memory2_0_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (onchip_memory2_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (onchip_memory2_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (onchip_memory2_0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (onchip_memory2_0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (onchip_memory2_0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (onchip_memory2_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (onchip_memory2_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (onchip_memory2_0_s1_burst_adapter_source0_ready)          //          .ready
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_usno3ea cmd_demux (
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (limiter_pipeline_source0_ready),                          //      sink.ready
		.sink_channel       (limiter_pipeline_source0_channel),                        //          .channel
		.sink_data          (limiter_pipeline_source0_data),                           //          .data
		.sink_startofpacket (limiter_pipeline_source0_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (limiter_pipeline_source0_endofpacket),                    //          .endofpacket
		.sink_valid         (limiter_pipeline_source0_valid),                          //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                    //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                    //          .valid
		.src0_data          (cmd_demux_src0_data),                                     //          .data
		.src0_channel       (cmd_demux_src0_channel),                                  //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                    //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                    //          .valid
		.src1_data          (cmd_demux_src1_data),                                     //          .data
		.src1_channel       (cmd_demux_src1_channel),                                  //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                               //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_usno3ea cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (limiter_pipeline_002_source0_ready),                      //      sink.ready
		.sink_channel       (limiter_pipeline_002_source0_channel),                    //          .channel
		.sink_data          (limiter_pipeline_002_source0_data),                       //          .data
		.sink_startofpacket (limiter_pipeline_002_source0_startofpacket),              //          .startofpacket
		.sink_endofpacket   (limiter_pipeline_002_source0_endofpacket),                //          .endofpacket
		.sink_valid         (limiter_pipeline_002_source0_valid),                      //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                //          .valid
		.src0_data          (cmd_demux_001_src0_data),                                 //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                              //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                          //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                //          .valid
		.src1_data          (cmd_demux_001_src1_data),                                 //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                              //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                        //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)                           //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_sz5y66a cmd_mux (
		.clk                 (clk_0_clk_clk),                                           //       clk.clk
		.reset               (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_src_valid),                                       //          .valid
		.src_data            (cmd_mux_src_data),                                        //          .data
		.src_channel         (cmd_mux_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),                              //     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),                              //          .valid
		.sink0_channel       (mux_pipeline_source0_channel),                            //          .channel
		.sink0_data          (mux_pipeline_source0_data),                               //          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket)                         //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_sz5y66a cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                           //       clk.clk
		.reset               (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                   //          .valid
		.src_data            (cmd_mux_001_src_data),                                    //          .data
		.src_channel         (cmd_mux_001_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (mux_pipeline_001_source0_ready),                          //     sink0.ready
		.sink0_valid         (mux_pipeline_001_source0_valid),                          //          .valid
		.sink0_channel       (mux_pipeline_001_source0_channel),                        //          .channel
		.sink0_data          (mux_pipeline_001_source0_data),                           //          .data
		.sink0_startofpacket (mux_pipeline_001_source0_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_001_source0_endofpacket)                     //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_w7zbgra cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                           //       clk.clk
		.reset               (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                   //          .valid
		.src_data            (cmd_mux_002_src_data),                                    //          .data
		.src_channel         (cmd_mux_002_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (mux_pipeline_002_source0_ready),                          //     sink0.ready
		.sink0_valid         (mux_pipeline_002_source0_valid),                          //          .valid
		.sink0_channel       (mux_pipeline_002_source0_channel),                        //          .channel
		.sink0_data          (mux_pipeline_002_source0_data),                           //          .data
		.sink0_startofpacket (mux_pipeline_002_source0_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_002_source0_endofpacket),                    //          .endofpacket
		.sink1_ready         (mux_pipeline_003_source0_ready),                          //     sink1.ready
		.sink1_valid         (mux_pipeline_003_source0_valid),                          //          .valid
		.sink1_channel       (mux_pipeline_003_source0_channel),                        //          .channel
		.sink1_data          (mux_pipeline_003_source0_data),                           //          .data
		.sink1_startofpacket (mux_pipeline_003_source0_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_003_source0_endofpacket)                     //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_vweyymi rsp_demux (
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                    //      sink.ready
		.sink_channel       (router_002_src_channel),                                  //          .channel
		.sink_data          (router_002_src_data),                                     //          .data
		.sink_startofpacket (router_002_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_002_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                               //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_vweyymi rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                    //      sink.ready
		.sink_channel       (router_003_src_channel),                                  //          .channel
		.sink_data          (router_003_src_data),                                     //          .data
		.sink_startofpacket (router_003_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_003_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                           //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_usno3ea rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (onchip_memory2_0_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (onchip_memory2_0_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (onchip_memory2_0_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (onchip_memory2_0_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (onchip_memory2_0_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                          //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                                //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                                //          .valid
		.src1_data          (rsp_demux_002_src1_data),                                 //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                              //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                        //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                           //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_x6gq7vq rsp_mux (
		.clk                 (clk_0_clk_clk),                                           //       clk.clk
		.reset               (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                       //       src.ready
		.src_valid           (rsp_mux_src_valid),                                       //          .valid
		.src_data            (rsp_mux_src_data),                                        //          .data
		.src_channel         (rsp_mux_src_channel),                                     //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (mux_pipeline_004_source0_ready),                          //     sink0.ready
		.sink0_valid         (mux_pipeline_004_source0_valid),                          //          .valid
		.sink0_channel       (mux_pipeline_004_source0_channel),                        //          .channel
		.sink0_data          (mux_pipeline_004_source0_data),                           //          .data
		.sink0_startofpacket (mux_pipeline_004_source0_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_004_source0_endofpacket),                    //          .endofpacket
		.sink1_ready         (mux_pipeline_005_source0_ready),                          //     sink1.ready
		.sink1_valid         (mux_pipeline_005_source0_valid),                          //          .valid
		.sink1_channel       (mux_pipeline_005_source0_channel),                        //          .channel
		.sink1_data          (mux_pipeline_005_source0_data),                           //          .data
		.sink1_startofpacket (mux_pipeline_005_source0_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_005_source0_endofpacket)                     //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_x6gq7vq rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                           //       clk.clk
		.reset               (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                   //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                   //          .valid
		.src_data            (rsp_mux_001_src_data),                                    //          .data
		.src_channel         (rsp_mux_001_src_channel),                                 //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (mux_pipeline_006_source0_ready),                          //     sink0.ready
		.sink0_valid         (mux_pipeline_006_source0_valid),                          //          .valid
		.sink0_channel       (mux_pipeline_006_source0_channel),                        //          .channel
		.sink0_data          (mux_pipeline_006_source0_data),                           //          .data
		.sink0_startofpacket (mux_pipeline_006_source0_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_006_source0_endofpacket),                    //          .endofpacket
		.sink1_ready         (mux_pipeline_007_source0_ready),                          //     sink1.ready
		.sink1_valid         (mux_pipeline_007_source0_valid),                          //          .valid
		.sink1_channel       (mux_pipeline_007_source0_channel),                        //          .channel
		.sink1_data          (mux_pipeline_007_source0_data),                           //          .data
		.sink1_startofpacket (mux_pipeline_007_source0_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_007_source0_endofpacket)                     //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (57),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (64),
		.IN_PKT_BURSTWRAP_L            (58),
		.IN_PKT_BURST_SIZE_H           (67),
		.IN_PKT_BURST_SIZE_L           (65),
		.IN_PKT_RESPONSE_STATUS_H      (95),
		.IN_PKT_RESPONSE_STATUS_L      (94),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (69),
		.IN_PKT_BURST_TYPE_L           (68),
		.IN_PKT_ORI_BURST_SIZE_L       (96),
		.IN_PKT_ORI_BURST_SIZE_H       (98),
		.IN_ST_DATA_W                  (99),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (84),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (122),
		.OUT_PKT_RESPONSE_STATUS_L     (121),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (123),
		.OUT_PKT_ORI_BURST_SIZE_H      (125),
		.OUT_ST_DATA_W                 (126),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) onchip_memory2_0_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                           //       clk.clk
		.reset                (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_004_src_valid),                                    //      sink.valid
		.in_channel           (router_004_src_channel),                                  //          .channel
		.in_startofpacket     (router_004_src_startofpacket),                            //          .startofpacket
		.in_endofpacket       (router_004_src_endofpacket),                              //          .endofpacket
		.in_ready             (router_004_src_ready),                                    //          .ready
		.in_data              (router_004_src_data),                                     //          .data
		.out_endofpacket      (onchip_memory2_0_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_memory2_0_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (onchip_memory2_0_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_memory2_0_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_memory2_0_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_memory2_0_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (84),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (85),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (122),
		.IN_PKT_RESPONSE_STATUS_L      (121),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (123),
		.IN_PKT_ORI_BURST_SIZE_H       (125),
		.IN_ST_DATA_W                  (126),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (57),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (67),
		.OUT_PKT_BURST_SIZE_L          (65),
		.OUT_PKT_RESPONSE_STATUS_H     (95),
		.OUT_PKT_RESPONSE_STATUS_L     (94),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (69),
		.OUT_PKT_BURST_TYPE_L          (68),
		.OUT_PKT_ORI_BURST_SIZE_L      (96),
		.OUT_PKT_ORI_BURST_SIZE_H      (98),
		.OUT_ST_DATA_W                 (99),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) onchip_memory2_0_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                           //       clk.clk
		.reset                (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_002_src_valid),                                   //      sink.valid
		.in_channel           (cmd_mux_002_src_channel),                                 //          .channel
		.in_startofpacket     (cmd_mux_002_src_startofpacket),                           //          .startofpacket
		.in_endofpacket       (cmd_mux_002_src_endofpacket),                             //          .endofpacket
		.in_ready             (cmd_mux_002_src_ready),                                   //          .ready
		.in_data              (cmd_mux_002_src_data),                                    //          .data
		.out_endofpacket      (onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_memory2_0_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (onchip_memory2_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_memory2_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_memory2_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (126),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline (
		.clk               (clk_0_clk_clk),                                                 //       cr0.clk
		.reset             (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.in_ready          (arria10_hps_0_h2f_axi_master_wr_limiter_cmd_src_ready),         //     sink0.ready
		.in_valid          (arria10_hps_0_h2f_axi_master_wr_limiter_cmd_src_valid),         //          .valid
		.in_startofpacket  (arria10_hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket), //          .startofpacket
		.in_endofpacket    (arria10_hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket),   //          .endofpacket
		.in_data           (arria10_hps_0_h2f_axi_master_wr_limiter_cmd_src_data),          //          .data
		.in_channel        (arria10_hps_0_h2f_axi_master_wr_limiter_cmd_src_channel),       //          .channel
		.out_ready         (limiter_pipeline_source0_ready),                                //   source0.ready
		.out_valid         (limiter_pipeline_source0_valid),                                //          .valid
		.out_startofpacket (limiter_pipeline_source0_startofpacket),                        //          .startofpacket
		.out_endofpacket   (limiter_pipeline_source0_endofpacket),                          //          .endofpacket
		.out_data          (limiter_pipeline_source0_data),                                 //          .data
		.out_channel       (limiter_pipeline_source0_channel),                              //          .channel
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_error          (1'b0)                                                           // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (126),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_001 (
		.clk               (clk_0_clk_clk),                                           //       cr0.clk
		.reset             (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_mux_src_ready),                                       //     sink0.ready
		.in_valid          (rsp_mux_src_valid),                                       //          .valid
		.in_startofpacket  (rsp_mux_src_startofpacket),                               //          .startofpacket
		.in_endofpacket    (rsp_mux_src_endofpacket),                                 //          .endofpacket
		.in_data           (rsp_mux_src_data),                                        //          .data
		.in_channel        (rsp_mux_src_channel),                                     //          .channel
		.out_ready         (limiter_pipeline_001_source0_ready),                      //   source0.ready
		.out_valid         (limiter_pipeline_001_source0_valid),                      //          .valid
		.out_startofpacket (limiter_pipeline_001_source0_startofpacket),              //          .startofpacket
		.out_endofpacket   (limiter_pipeline_001_source0_endofpacket),                //          .endofpacket
		.out_data          (limiter_pipeline_001_source0_data),                       //          .data
		.out_channel       (limiter_pipeline_001_source0_channel),                    //          .channel
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_error          (1'b0)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (126),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_002 (
		.clk               (clk_0_clk_clk),                                                 //       cr0.clk
		.reset             (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.in_ready          (arria10_hps_0_h2f_axi_master_rd_limiter_cmd_src_ready),         //     sink0.ready
		.in_valid          (arria10_hps_0_h2f_axi_master_rd_limiter_cmd_src_valid),         //          .valid
		.in_startofpacket  (arria10_hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket), //          .startofpacket
		.in_endofpacket    (arria10_hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket),   //          .endofpacket
		.in_data           (arria10_hps_0_h2f_axi_master_rd_limiter_cmd_src_data),          //          .data
		.in_channel        (arria10_hps_0_h2f_axi_master_rd_limiter_cmd_src_channel),       //          .channel
		.out_ready         (limiter_pipeline_002_source0_ready),                            //   source0.ready
		.out_valid         (limiter_pipeline_002_source0_valid),                            //          .valid
		.out_startofpacket (limiter_pipeline_002_source0_startofpacket),                    //          .startofpacket
		.out_endofpacket   (limiter_pipeline_002_source0_endofpacket),                      //          .endofpacket
		.out_data          (limiter_pipeline_002_source0_data),                             //          .data
		.out_channel       (limiter_pipeline_002_source0_channel),                          //          .channel
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_error          (1'b0)                                                           // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (126),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_003 (
		.clk               (clk_0_clk_clk),                                           //       cr0.clk
		.reset             (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_mux_001_src_ready),                                   //     sink0.ready
		.in_valid          (rsp_mux_001_src_valid),                                   //          .valid
		.in_startofpacket  (rsp_mux_001_src_startofpacket),                           //          .startofpacket
		.in_endofpacket    (rsp_mux_001_src_endofpacket),                             //          .endofpacket
		.in_data           (rsp_mux_001_src_data),                                    //          .data
		.in_channel        (rsp_mux_001_src_channel),                                 //          .channel
		.out_ready         (limiter_pipeline_003_source0_ready),                      //   source0.ready
		.out_valid         (limiter_pipeline_003_source0_valid),                      //          .valid
		.out_startofpacket (limiter_pipeline_003_source0_startofpacket),              //          .startofpacket
		.out_endofpacket   (limiter_pipeline_003_source0_endofpacket),                //          .endofpacket
		.out_data          (limiter_pipeline_003_source0_data),                       //          .data
		.out_channel       (limiter_pipeline_003_source0_channel),                    //          .channel
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_error          (1'b0)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (126),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline (
		.clk               (clk_0_clk_clk),                                           //       cr0.clk
		.reset             (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_src_ready),                                       //     sink0.ready
		.in_valid          (cmd_mux_src_valid),                                       //          .valid
		.in_startofpacket  (cmd_mux_src_startofpacket),                               //          .startofpacket
		.in_endofpacket    (cmd_mux_src_endofpacket),                                 //          .endofpacket
		.in_data           (cmd_mux_src_data),                                        //          .data
		.in_channel        (cmd_mux_src_channel),                                     //          .channel
		.out_ready         (agent_pipeline_source0_ready),                            //   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                            //          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),                    //          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),                      //          .endofpacket
		.out_data          (agent_pipeline_source0_data),                             //          .data
		.out_channel       (agent_pipeline_source0_channel),                          //          .channel
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_error          (1'b0)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (126),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_001 (
		.clk               (clk_0_clk_clk),                                           //       cr0.clk
		.reset             (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_001_src_ready),                                   //     sink0.ready
		.in_valid          (cmd_mux_001_src_valid),                                   //          .valid
		.in_startofpacket  (cmd_mux_001_src_startofpacket),                           //          .startofpacket
		.in_endofpacket    (cmd_mux_001_src_endofpacket),                             //          .endofpacket
		.in_data           (cmd_mux_001_src_data),                                    //          .data
		.in_channel        (cmd_mux_001_src_channel),                                 //          .channel
		.out_ready         (agent_pipeline_001_source0_ready),                        //   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                        //          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),                //          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),                  //          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                         //          .data
		.out_channel       (agent_pipeline_001_source0_channel),                      //          .channel
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_error          (1'b0)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (126),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_002 (
		.clk               (clk_0_clk_clk),                                           //       cr0.clk
		.reset             (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (protobuf_serializer_0_s0_agent_write_rp_ready),           //     sink0.ready
		.in_valid          (protobuf_serializer_0_s0_agent_write_rp_valid),           //          .valid
		.in_startofpacket  (protobuf_serializer_0_s0_agent_write_rp_startofpacket),   //          .startofpacket
		.in_endofpacket    (protobuf_serializer_0_s0_agent_write_rp_endofpacket),     //          .endofpacket
		.in_data           (protobuf_serializer_0_s0_agent_write_rp_data),            //          .data
		.out_ready         (agent_pipeline_002_source0_ready),                        //   source0.ready
		.out_valid         (agent_pipeline_002_source0_valid),                        //          .valid
		.out_startofpacket (agent_pipeline_002_source0_startofpacket),                //          .startofpacket
		.out_endofpacket   (agent_pipeline_002_source0_endofpacket),                  //          .endofpacket
		.out_data          (agent_pipeline_002_source0_data),                         //          .data
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_channel       (),                                                        // (terminated)
		.in_channel        (1'b0)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (126),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_003 (
		.clk               (clk_0_clk_clk),                                           //       cr0.clk
		.reset             (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (protobuf_serializer_0_s0_agent_read_rp_ready),            //     sink0.ready
		.in_valid          (protobuf_serializer_0_s0_agent_read_rp_valid),            //          .valid
		.in_startofpacket  (protobuf_serializer_0_s0_agent_read_rp_startofpacket),    //          .startofpacket
		.in_endofpacket    (protobuf_serializer_0_s0_agent_read_rp_endofpacket),      //          .endofpacket
		.in_data           (protobuf_serializer_0_s0_agent_read_rp_data),             //          .data
		.out_ready         (agent_pipeline_003_source0_ready),                        //   source0.ready
		.out_valid         (agent_pipeline_003_source0_valid),                        //          .valid
		.out_startofpacket (agent_pipeline_003_source0_startofpacket),                //          .startofpacket
		.out_endofpacket   (agent_pipeline_003_source0_endofpacket),                  //          .endofpacket
		.out_data          (agent_pipeline_003_source0_data),                         //          .data
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_channel       (),                                                        // (terminated)
		.in_channel        (1'b0)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (99),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_004 (
		.clk               (clk_0_clk_clk),                                           //       cr0.clk
		.reset             (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (onchip_memory2_0_s1_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (onchip_memory2_0_s1_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (onchip_memory2_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (onchip_memory2_0_s1_burst_adapter_source0_data),          //          .data
		.in_channel        (onchip_memory2_0_s1_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_004_source0_ready),                        //   source0.ready
		.out_valid         (agent_pipeline_004_source0_valid),                        //          .valid
		.out_startofpacket (agent_pipeline_004_source0_startofpacket),                //          .startofpacket
		.out_endofpacket   (agent_pipeline_004_source0_endofpacket),                  //          .endofpacket
		.out_data          (agent_pipeline_004_source0_data),                         //          .data
		.out_channel       (agent_pipeline_004_source0_channel),                      //          .channel
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_error          (1'b0)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (99),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_005 (
		.clk               (clk_0_clk_clk),                                           //       cr0.clk
		.reset             (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (onchip_memory2_0_s1_agent_rp_ready),                      //     sink0.ready
		.in_valid          (onchip_memory2_0_s1_agent_rp_valid),                      //          .valid
		.in_startofpacket  (onchip_memory2_0_s1_agent_rp_startofpacket),              //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rp_endofpacket),                //          .endofpacket
		.in_data           (onchip_memory2_0_s1_agent_rp_data),                       //          .data
		.out_ready         (agent_pipeline_005_source0_ready),                        //   source0.ready
		.out_valid         (agent_pipeline_005_source0_valid),                        //          .valid
		.out_startofpacket (agent_pipeline_005_source0_startofpacket),                //          .startofpacket
		.out_endofpacket   (agent_pipeline_005_source0_endofpacket),                  //          .endofpacket
		.out_data          (agent_pipeline_005_source0_data),                         //          .data
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_channel       (),                                                        // (terminated)
		.in_channel        (1'b0)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (126),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline (
		.clk               (clk_0_clk_clk),                                           //       cr0.clk
		.reset             (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                    //     sink0.ready
		.in_valid          (cmd_demux_src0_valid),                                    //          .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                            //          .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                              //          .endofpacket
		.in_data           (cmd_demux_src0_data),                                     //          .data
		.in_channel        (cmd_demux_src0_channel),                                  //          .channel
		.out_ready         (mux_pipeline_source0_ready),                              //   source0.ready
		.out_valid         (mux_pipeline_source0_valid),                              //          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),                      //          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),                        //          .endofpacket
		.out_data          (mux_pipeline_source0_data),                               //          .data
		.out_channel       (mux_pipeline_source0_channel),                            //          .channel
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_error          (1'b0)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (126),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_001 (
		.clk               (clk_0_clk_clk),                                           //       cr0.clk
		.reset             (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                                //     sink0.ready
		.in_valid          (cmd_demux_001_src0_valid),                                //          .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                        //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                          //          .endofpacket
		.in_data           (cmd_demux_001_src0_data),                                 //          .data
		.in_channel        (cmd_demux_001_src0_channel),                              //          .channel
		.out_ready         (mux_pipeline_001_source0_ready),                          //   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),                          //          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),                  //          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),                    //          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),                           //          .data
		.out_channel       (mux_pipeline_001_source0_channel),                        //          .channel
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_error          (1'b0)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (126),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_002 (
		.clk               (clk_0_clk_clk),                                           //       cr0.clk
		.reset             (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src1_ready),                                    //     sink0.ready
		.in_valid          (cmd_demux_src1_valid),                                    //          .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                            //          .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                              //          .endofpacket
		.in_data           (cmd_demux_src1_data),                                     //          .data
		.in_channel        (cmd_demux_src1_channel),                                  //          .channel
		.out_ready         (mux_pipeline_002_source0_ready),                          //   source0.ready
		.out_valid         (mux_pipeline_002_source0_valid),                          //          .valid
		.out_startofpacket (mux_pipeline_002_source0_startofpacket),                  //          .startofpacket
		.out_endofpacket   (mux_pipeline_002_source0_endofpacket),                    //          .endofpacket
		.out_data          (mux_pipeline_002_source0_data),                           //          .data
		.out_channel       (mux_pipeline_002_source0_channel),                        //          .channel
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_error          (1'b0)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (126),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_003 (
		.clk               (clk_0_clk_clk),                                           //       cr0.clk
		.reset             (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src1_ready),                                //     sink0.ready
		.in_valid          (cmd_demux_001_src1_valid),                                //          .valid
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),                        //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),                          //          .endofpacket
		.in_data           (cmd_demux_001_src1_data),                                 //          .data
		.in_channel        (cmd_demux_001_src1_channel),                              //          .channel
		.out_ready         (mux_pipeline_003_source0_ready),                          //   source0.ready
		.out_valid         (mux_pipeline_003_source0_valid),                          //          .valid
		.out_startofpacket (mux_pipeline_003_source0_startofpacket),                  //          .startofpacket
		.out_endofpacket   (mux_pipeline_003_source0_endofpacket),                    //          .endofpacket
		.out_data          (mux_pipeline_003_source0_data),                           //          .data
		.out_channel       (mux_pipeline_003_source0_channel),                        //          .channel
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_error          (1'b0)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (126),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_004 (
		.clk               (clk_0_clk_clk),                                           //       cr0.clk
		.reset             (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                    //     sink0.ready
		.in_valid          (rsp_demux_src0_valid),                                    //          .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                            //          .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                              //          .endofpacket
		.in_data           (rsp_demux_src0_data),                                     //          .data
		.in_channel        (rsp_demux_src0_channel),                                  //          .channel
		.out_ready         (mux_pipeline_004_source0_ready),                          //   source0.ready
		.out_valid         (mux_pipeline_004_source0_valid),                          //          .valid
		.out_startofpacket (mux_pipeline_004_source0_startofpacket),                  //          .startofpacket
		.out_endofpacket   (mux_pipeline_004_source0_endofpacket),                    //          .endofpacket
		.out_data          (mux_pipeline_004_source0_data),                           //          .data
		.out_channel       (mux_pipeline_004_source0_channel),                        //          .channel
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_error          (1'b0)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (126),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_005 (
		.clk               (clk_0_clk_clk),                                           //       cr0.clk
		.reset             (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                                //     sink0.ready
		.in_valid          (rsp_demux_002_src0_valid),                                //          .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),                        //          .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                          //          .endofpacket
		.in_data           (rsp_demux_002_src0_data),                                 //          .data
		.in_channel        (rsp_demux_002_src0_channel),                              //          .channel
		.out_ready         (mux_pipeline_005_source0_ready),                          //   source0.ready
		.out_valid         (mux_pipeline_005_source0_valid),                          //          .valid
		.out_startofpacket (mux_pipeline_005_source0_startofpacket),                  //          .startofpacket
		.out_endofpacket   (mux_pipeline_005_source0_endofpacket),                    //          .endofpacket
		.out_data          (mux_pipeline_005_source0_data),                           //          .data
		.out_channel       (mux_pipeline_005_source0_channel),                        //          .channel
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_error          (1'b0)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (126),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_006 (
		.clk               (clk_0_clk_clk),                                           //       cr0.clk
		.reset             (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                                //     sink0.ready
		.in_valid          (rsp_demux_001_src0_valid),                                //          .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                        //          .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                          //          .endofpacket
		.in_data           (rsp_demux_001_src0_data),                                 //          .data
		.in_channel        (rsp_demux_001_src0_channel),                              //          .channel
		.out_ready         (mux_pipeline_006_source0_ready),                          //   source0.ready
		.out_valid         (mux_pipeline_006_source0_valid),                          //          .valid
		.out_startofpacket (mux_pipeline_006_source0_startofpacket),                  //          .startofpacket
		.out_endofpacket   (mux_pipeline_006_source0_endofpacket),                    //          .endofpacket
		.out_data          (mux_pipeline_006_source0_data),                           //          .data
		.out_channel       (mux_pipeline_006_source0_channel),                        //          .channel
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_error          (1'b0)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (126),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (3),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_007 (
		.clk               (clk_0_clk_clk),                                           //       cr0.clk
		.reset             (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_002_src1_ready),                                //     sink0.ready
		.in_valid          (rsp_demux_002_src1_valid),                                //          .valid
		.in_startofpacket  (rsp_demux_002_src1_startofpacket),                        //          .startofpacket
		.in_endofpacket    (rsp_demux_002_src1_endofpacket),                          //          .endofpacket
		.in_data           (rsp_demux_002_src1_data),                                 //          .data
		.in_channel        (rsp_demux_002_src1_channel),                              //          .channel
		.out_ready         (mux_pipeline_007_source0_ready),                          //   source0.ready
		.out_valid         (mux_pipeline_007_source0_valid),                          //          .valid
		.out_startofpacket (mux_pipeline_007_source0_startofpacket),                  //          .startofpacket
		.out_endofpacket   (mux_pipeline_007_source0_endofpacket),                    //          .endofpacket
		.out_data          (mux_pipeline_007_source0_data),                           //          .data
		.out_channel       (mux_pipeline_007_source0_channel),                        //          .channel
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_error          (1'b0)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (126),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) pipeline_stage (
		.clk               (clk_0_clk_clk),                                            //       cr0.clk
		.reset             (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (arria10_hps_0_h2f_axi_master_agent_read_cp_ready),         //     sink0.ready
		.in_valid          (arria10_hps_0_h2f_axi_master_agent_read_cp_valid),         //          .valid
		.in_startofpacket  (arria10_hps_0_h2f_axi_master_agent_read_cp_startofpacket), //          .startofpacket
		.in_endofpacket    (arria10_hps_0_h2f_axi_master_agent_read_cp_endofpacket),   //          .endofpacket
		.in_data           (arria10_hps_0_h2f_axi_master_agent_read_cp_data),          //          .data
		.out_ready         (pipeline_stage_source0_ready),                             //   source0.ready
		.out_valid         (pipeline_stage_source0_valid),                             //          .valid
		.out_startofpacket (pipeline_stage_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (pipeline_stage_source0_endofpacket),                       //          .endofpacket
		.out_data          (pipeline_stage_source0_data),                              //          .data
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_channel       (),                                                         // (terminated)
		.in_channel        (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (126),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) pipeline_stage_001 (
		.clk               (clk_0_clk_clk),                                             //       cr0.clk
		.reset             (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.in_ready          (arria10_hps_0_h2f_axi_master_agent_write_cp_ready),         //     sink0.ready
		.in_valid          (arria10_hps_0_h2f_axi_master_agent_write_cp_valid),         //          .valid
		.in_startofpacket  (arria10_hps_0_h2f_axi_master_agent_write_cp_startofpacket), //          .startofpacket
		.in_endofpacket    (arria10_hps_0_h2f_axi_master_agent_write_cp_endofpacket),   //          .endofpacket
		.in_data           (arria10_hps_0_h2f_axi_master_agent_write_cp_data),          //          .data
		.out_ready         (pipeline_stage_001_source0_ready),                          //   source0.ready
		.out_valid         (pipeline_stage_001_source0_valid),                          //          .valid
		.out_startofpacket (pipeline_stage_001_source0_startofpacket),                  //          .startofpacket
		.out_endofpacket   (pipeline_stage_001_source0_endofpacket),                    //          .endofpacket
		.out_data          (pipeline_stage_001_source0_data),                           //          .data
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_channel       (),                                                          // (terminated)
		.in_channel        (1'b0)                                                       // (terminated)
	);

	ghrd_10as066n2_altera_avalon_st_adapter_161_4tryxxy #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (arria10_hps_0_h2f_axi_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_memory2_0_s1_agent_rdata_fifo_out_data),           //     in_0.data
		.in_0_valid     (onchip_memory2_0_s1_agent_rdata_fifo_out_valid),          //         .valid
		.in_0_ready     (onchip_memory2_0_s1_agent_rdata_fifo_out_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                            //         .error
	);

endmodule
